<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JSX</title>
    <url>/ygd_blog_pub/2022/03/18/02-JSX/</url>
    <content><![CDATA[<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>知道什么什么是 JSX</li>
<li>能够使用 JSX 完成基本的条件渲染和列表渲染</li>
<li>能够在 JSX 中进行样式处理</li>
</ul>
<hr>
<h2 id="为什么使用-JSX"><a href="#为什么使用-JSX" class="headerlink" title="为什么使用 JSX"></a>为什么使用 JSX</h2><p>同学们阅读下面的代码，它想表达的的 html 结构是什么样的？</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;购物列表&#x27;</span>),</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;ul&#x27;</span>, <span class="literal">null</span>, <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;华为&#x27;</span>), <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;iPhone&#x27;</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>给出下面的结构，使用 React 基本 api 创建并显示到页面上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>请问同学使用 React API 创建页面的感受？</p>
<p>繁琐、不直观，无法一眼看出所描述的结构、开发体验不好</p>
<hr>
<h2 id="JSX-介绍和使用步骤"><a href="#JSX-介绍和使用步骤" class="headerlink" title="JSX 介绍和使用步骤"></a>JSX 介绍和使用步骤</h2><h3 id="JSX-介绍"><a href="#JSX-介绍" class="headerlink" title="JSX 介绍"></a>JSX 介绍</h3><p>JSX 是 XML-like 的 JS 语法拓展。</p>
<p>就是拓展了 JS 的语法，这个语法和 XML 的语法很像。</p>
<p>有的时候也被叫做 JavaScript XML。</p>
<blockquote>
<p>官方文档：</p>
<p><a class="link"   href="https://facebook.github.io/jsx/" >https://facebook.github.io/jsx/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://en.wikipedia.org/wiki/JSX_(JavaScript)" >https://en.wikipedia.org/wiki/JSX_(JavaScript)<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>JSX 语法的特点就是，让我们可以在 Javascript 代码中写 XML(HTML) 格式的代码</p>
<p>这种视图的构建模式一般称之为：声明式视图构建模式。问题：什么是命令式视图构建？</p>
<p>这种对于开发者来说，语法直观、学习成本低、开发效率高，大大减少了原生 DOM 操作。</p>
<p>以前 DOM 操作的效率、水平高低由开发者决定，现在是框架搞定。</p>
<p><strong>JSX 是 React 声明式的视图构建模式的体现，是 React 最大的特点，也是现在流行的前端框架设计理念</strong></p>
<h3 id="JSX-的使用"><a href="#JSX-的使用" class="headerlink" title="JSX 的使用"></a>JSX 的使用</h3><p>接下来我们就来体验一下 JSX 语法。</p>
<p>直接在 .js 代码中声明一个标签，格式和 html 标签中相同。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 react 元素</span></span><br><span class="line"><span class="comment">// 原来</span></span><br><span class="line"><span class="comment">// const h1 = React.createElement(&#x27;h1&#x27;, null, &#x27;Hello React&#x27;)</span></span><br><span class="line"><span class="comment">//现在</span></span><br><span class="line"><span class="keyword">const</span> h1 = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 react 元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(h1, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>使用 JSX 完成笔记开头的需求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 JSX 语法代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 react 元素</span></span><br><span class="line"><span class="keyword">const</span> el = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 react 元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(el, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>我们说 JSX 不是标准的 JS 语法，是 JS 的语法扩展。</p>
<p>之所以上面的代码没有报错，是因为我们的 React 脚手架项目中内置了 JSX 语法解析器，用来解析该语法。</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>使用步骤总结</p>
<ol>
<li>导入 ReactDOM 包</li>
<li>使用 JSX 创建 react 元素</li>
<li>将 react 元素渲染到页面中</li>
</ol>
<p><strong>完整代码</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import React from &#x27;react&#x27; // React 17之后无需再引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 react 元素</span></span><br><span class="line"><span class="keyword">const</span> h1 = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 react 元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(h1, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import React from &#x27;react&#x27; // React 17之后无需再引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 react 元素</span></span><br><span class="line"><span class="keyword">const</span> el = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 react 元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(el, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<p>React 脚手架项目中 .js 文件中可以直接声明 html 标签的背后原因</p>
<p>在线环境：<a class="link"   href="https://www.babeljs.cn/" >https://www.babeljs.cn/<i class="fas fa-external-link-alt"></i></a></p>
<p>注意点：</p>
<img src="./images/jsx-compiler.png" alt="image-20220220233730589" style="zoom:80%;" />

<p>JSX 语法转换的两种方式的差异点：</p>
<p>从 React 17 之后加入的，优点</p>
<img src="./images/jsx-good.png" alt="image-20220220234223353" style="zoom:80%;" />

<blockquote>
<p>官方说明</p>
<p><a class="link"   href="https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html" >https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<hr>
<h3 id="JSX-使用注意点"><a href="#JSX-使用注意点" class="headerlink" title="JSX 使用注意点"></a>JSX 使用注意点</h3><ol>
<li>React17 版本之后，使用 JSX 不再需要额外导入 React</li>
<li>在 React 中所有标签都要闭合 &#x2F;&gt;，无论你是不是自闭和标签</li>
<li>声明的 JSX 结构必须要有一个根节点， 如果没有根节点，可以使用<code>&lt;&gt;&lt;/&gt;</code>（幽灵节点）或者<code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code>包裹</li>
<li>JSX 结构中声明的标签，属性名使用驼峰命名法： onclick &#x3D;&gt; onClick、<code>class</code> &#x3D;&gt; <code>className</code>、<code>for</code> &#x3D;&gt; <code>htmlFor</code></li>
<li>JSX 可以换行，如果 JSX 有多行，推荐使用<code>()</code>包裹 JSX，防止 JS 自动插入分号陷阱</li>
</ol>
<ul>
<li><a class="link"   href="https://blog.csdn.net/qq_36391954/article/details/79366383" >https://blog.csdn.net/qq_36391954/article/details/79366383<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<hr>
<h2 id="开发工具设置"><a href="#开发工具设置" class="headerlink" title="开发工具设置"></a>开发工具设置</h2><h3 id="使用-prettier-插件"><a href="#使用-prettier-插件" class="headerlink" title="使用 prettier 插件"></a>使用 prettier 插件</h3><p><strong>目标</strong>：学习如何配置 vscode 插件进行代码格式化</p>
<p><strong>内容</strong></p>
<ul>
<li><p>prettier 插件是一个代码格式化插件，可以格式化 react 代码</p>
</li>
<li><p>安装插件</p>
</li>
</ul>
<p><img src="/ygd_blog_pub/images/image-20211006151941639.png" alt="image-20211006151941639"></p>
<ul>
<li>添加 prettier 的配置</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存的时候用使用prettier进行格式化</span></span><br><span class="line"><span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 默认使用prittier作为格式化工具</span></span><br><span class="line"><span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要有分号</span></span><br><span class="line"><span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 使用单引号</span></span><br><span class="line"><span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h3 id="vscode-配置自动补全"><a href="#vscode-配置自动补全" class="headerlink" title="vscode 配置自动补全"></a>vscode 配置自动补全</h3><p><strong>目标</strong>：配置 vscode，在 vscode 中使用 tab 键可以快速生成 HTML 内容</p>
<p><strong>内容</strong>：</p>
<p>​ 无需安装额外插件，直接在设置中添加如下设置即可。</p>
<p><strong>核心代码</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 js 文件中启用 emmet 语法</span></span><br><span class="line"><span class="attr">&quot;emmet.includeLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javascriptreact&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 按tab键展开 emmet 语法</span></span><br><span class="line"><span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="JSX-中使用-JavaScript-表达式"><a href="#JSX-中使用-JavaScript-表达式" class="headerlink" title="JSX 中使用 JavaScript 表达式"></a>JSX 中使用 JavaScript 表达式</h2><p><strong>思考：</strong></p>
<ul>
<li><p>JSX 语法是好用，但是这和写静态 html 标签好像没有什么区别？</p>
</li>
<li><p>如何在 JSX 标签中动态显示数据？</p>
<ul>
<li>数据定义在哪里？</li>
<li>JSX 定义在哪里？</li>
</ul>
</li>
<li><p>大胆猜想，既然 JSX 是直接写在 JS 中的，那 JS 当中的变量或函数应该可以在 JSX 中访问</p>
</li>
</ul>
<p><strong>访问语法：</strong></p>
<p><code>&#123; JavaScript 表达式 &#125;</code></p>
<p>JS 表达式：数据类型和运算符的组合（可以单独出现数据类型，也可以数据类型+运算符的组合）</p>
<p>表达式就是一个值，一个可以在栈内存分配的值。</p>
<ul>
<li>字符串、数值、布尔值、null、undefined、object（ [] &#x2F; {} ）</li>
<li>1 + 2、’abc’.split(‘’)、[‘a’, ‘b’].join(‘-‘)</li>
<li>function fn() {}、 fn()</li>
</ul>
<p><strong>技巧：</strong></p>
<p>验证是不是 JS 表达式的技巧：看内容能不能作为方法的参数，比如，<code>console.log( 表达式 )</code></p>
<hr>
<p>代码举例：</p>
<p>在 JSX 结构中访问以下数据类型</p>
<ol>
<li>字符串类型</li>
<li>数字类型</li>
<li>数组类型</li>
<li>对象类型</li>
<li>三元表达式</li>
<li>函数类型</li>
<li>JSX 表达式类型</li>
<li>渲染一张图片</li>
</ol>
<p>代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串类型</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"><span class="comment">// 数字类型</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="comment">// 数组类型</span></span><br><span class="line"><span class="keyword">const</span> hobbies = [<span class="string">&#x27;吃饭&#x27;</span>, <span class="string">&#x27;睡觉&#x27;</span>, <span class="string">&#x27;打豆豆&#x27;</span>]</span><br><span class="line"><span class="comment">// 对象类型</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Rose&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="comment">// 三元表达式</span></span><br><span class="line"><span class="comment">// 问 1 &amp;gt; 0 吗？&#123;1&gt;0 ? &#x27;是的&#x27;: &#x27;不是&#x27;&#125;</span></span><br><span class="line"><span class="comment">// 函数类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fun</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是函数返回的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JSX表达式类型</span></span><br><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是jsx表达式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 react 元素</span></span><br><span class="line"><span class="keyword">const</span> el = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Hello &#123;name&#125;，我今年&#123;age&#125;岁</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;hobbies.join(&#x27;,&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;obj.name&#125; 年龄：&#123;obj.age&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>问 1 <span class="symbol">&amp;gt;</span> 0 吗？&#123;1 &gt; 0 ? &#x27;是的&#x27; : &#x27;不是&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;fun()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;jsx&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>JSX 中的注释</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 快键键 ctrl + / */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ol>
<li>JSX 中的 {}内，可以出现任意的 js 表达式（除了 object {}）</li>
<li>JSX 中的 {}内，不能出现 js 语句，比如<code>if</code>、<code>for</code>、<code>while</code>等</li>
<li>函数不能直接出现在标签内部的{}内，但是函数调用可以。</li>
<li>函数可以作为标签属性出现在{}内，比如：事件处理程序的绑定。</li>
</ol>
<hr>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>什么是条件渲染？</p>
<p>条件是谁？</p>
<p>渲染是谁？</p>
<p>条件在哪？</p>
<p>渲染在哪？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>条件和渲染是如何结合在一起的？</p>
<p>同学们回想一下，vue 中条件和渲染是怎么结合在一起的？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>那如何将 react 中条件（JS 中的数据）和渲染（JSX 结构）该如何结合在一起？</p>
<p>答：通过，函数、三元运算符、逻辑与（&amp;&amp;）运算符</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p><strong>举例：</strong></p>
<p>现有如下需求：</p>
<p>ajax 发起异步请求数据的过程中和数据返回后，页面渲染的 UI 不同。</p>
<p>在 react 中如何实现？</p>
<p><strong>代码</strong></p>
<ul>
<li>通过判断<code>if/else</code>控制</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX 中的 条件 渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件</span></span><br><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染（UI）</span></span><br><span class="line"><span class="keyword">const</span> loadingUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据加载中！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> successUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据请求成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 条件和渲染结合在一起了（对比vue的条件和渲染的结合）</span></span><br><span class="line">  <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">    <span class="keyword">return</span> loadingUI</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> successUI</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;loadData()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(jsx, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>通过三元运算符控制</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX 中的 条件 渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件</span></span><br><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染（UI）</span></span><br><span class="line"><span class="keyword">const</span> loadingUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据加载中！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> successUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据请求成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元表达式</span></span><br><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;isLoading ? loadingUI : successUI&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(jsx, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>逻辑与（&amp;&amp;）运算符</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX 中的 条件 渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件</span></span><br><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染（UI）</span></span><br><span class="line"><span class="keyword">const</span> loadingUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据加载中！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> successUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据请求成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;isLoading &amp;&amp; loadingUI&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(jsx, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>什么是列表渲染？</p>
<p>列表是谁？</p>
<p>渲染是谁？</p>
<p>列表在哪？</p>
<p>渲染在哪？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>列表和渲染如何结合在一起？</p>
<p>同学们回想一下，vue 中列表和渲染是怎么结合在一起的？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>React 中该如何列表（JS 数组）和渲染（每一个数组元素对应的 UI）结合在一起？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>观察一下上面刚刚学习的在 JSX 中渲染数组的规律？</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books1 = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>]</span><br><span class="line">&lt;div&gt;&#123;books1&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>结合上面的知识，和规律</p>
<p>我们是否可以这样定义一个数组</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books = [<span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>, <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>, <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>]</span><br></pre></td></tr></table></figure>

<p>渲染这个数组</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;books&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>实际开发当中服务器端是不可能给我们返回这样结构的数据的</p>
<p>我们拿到的数据都是这样的</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books1 = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>那现在的问题就转化为：如何把 books1 数组转换为 books2 的问题</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books2 = [<span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>, <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>, <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>]</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>数组内容格式转换，使用数组的 map 方法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books1 = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> books2 = books1.<span class="title function_">map</span>(<span class="function"><span class="params">book</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;book&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul = <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;books2&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>或直接在 JSX 中渲染</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books1 = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;books1.map(book =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;book&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>最后在遍历时添加 key 属性</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books1 = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;books1.map((book, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;book&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ul>
<li>场景：重复生成相同的 HTML 结构，比如，歌曲列表、商品列表等</li>
<li>实现：使用数组的 <code>map</code> 方法进行格式转换</li>
<li>注意：需要为遍历项添加 <code>key</code> 属性<ul>
<li>key 在 HTML 结构中是看不到的，是 React 内部用来进行性能优化时使用的</li>
<li>key 在当前列表中要唯一</li>
<li>如果列表中有像 id 这种的唯一值，就用 id 来作为 key 值</li>
<li>如果列表中没有像 id 这种的唯一值，就可以使用 index（下标）来作为 key 值</li>
</ul>
</li>
</ul>
<p><strong>练习：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 列表渲染如下数据</span></span><br><span class="line"><span class="keyword">const</span> books = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;React&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Angular&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h2><p><strong>目标</strong>：掌握 jsx 中如何通过 style 和 className 控制元素的样式</p>
<p><strong>内容</strong>：</p>
<ol>
<li>行内样式 - style<ol>
<li>默认情况像 width&#x2F;height 等属性，可以省略 px，直接使用 <code>数值</code> 即可。如果有其它单位显示需求，直接在数值后跟单位即可<code>&#123;widht: &#39;10rem&#39;&#125;</code> ， <code>&#123;widht: &#39;10vw&#39;&#125;</code>。</li>
<li>如果是需要使用百分比的单位，此时，继续使用字符串的值即可（比如，<code>&quot;60%&quot;</code>）</li>
</ol>
</li>
<li>类名 - className【推荐】</li>
</ol>
<p><strong>核心代码：</strong></p>
<ul>
<li><p>行内样式-style</p>
<ul>
<li><p>浏览器需要的</p>
</li>
<li><p>&#96;&#96;&#96;html</p>
<h1 style="color: red; background-color: pink; width: 300px;">Hello React</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- React 中定义的</span><br><span class="line"></span><br><span class="line">- ```jsx</span><br><span class="line">  const h1 = &lt;h1 style=&#123;&#123; color: &#x27;red&#x27;, backgroundColor: &#x27;pink&#x27;, width: 300 &#125;&#125;&gt;Hello React&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>类名-className</p>
<ul>
<li><p>浏览器需要的</p>
</li>
<li><p>&#96;&#96;&#96;html</p>
<h1 class="p-title">Hello React</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- React 中定义的</span><br><span class="line"></span><br><span class="line">- ```jsx</span><br><span class="line">  // 导入样式</span><br><span class="line">  import &#x27;./base.css&#x27;</span><br><span class="line">  const dv = &lt;div className=&#123;&#x27;p-title&#x27;&#125;&gt;style样式&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>思考：</strong></p>
<p>如何让样式实现条件设置（动态设置）？</p>
<hr>
<h2 id="JSX-总结"><a href="#JSX-总结" class="headerlink" title="JSX 总结"></a>JSX 总结</h2><ul>
<li>React 使用 JSX 来编写 UI（HTML）</li>
<li><strong>React 完全利用 JS 语言自身的能力来增强 UI 的编写</strong> - <strong>能用 JS 来实现的功能绝不会增加一个新的 API</strong></li>
<li>现在，就可以使用 React 来编写任意 UI 结构了</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX</span></span><br><span class="line">&lt;div&gt;&#123;<span class="variable constant_">JS</span> 表达式&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>一句话总结：</strong></p>
<p><strong>只要是在 JSX 结构中访问 JS 中的数据加上一个 {} 即可。React 后续所有的处理逻辑基本上都是在这个基础上延伸出来的。</strong></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>JSX</tag>
      </tags>
  </entry>
  <entry>
    <title>React 的特点</title>
    <url>/ygd_blog_pub/2022/01/10/01-React%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>说出 React 的特点</li>
<li>了解“声明式”和“命令式”术语</li>
<li>使用 React 脚手架工具创建 React 项目</li>
<li>了解 React 的基本 API</li>
</ul>
<hr>
<h2 id="React-介绍"><a href="#React-介绍" class="headerlink" title="React 介绍"></a>React 介绍</h2><img src="images/logo-react.jpeg" alt="image-20211006124106131" style="zoom:60%;" />

<h3 id="React-是什么？"><a href="#React-是什么？" class="headerlink" title="React 是什么？"></a>React 是什么？</h3><p>A JavaScript library for building user interfaces</p>
<p>用于构建用户界面的 JavaScript 库</p>
<p>我们经常说库和开发框架，怎么区分库和开发框架？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>React 是一个动词。意思是（作出）反应，化学反应。</p>
<p>之所以这么命名也是暗含了一定的设计理念就是作出反应。那对什么做出反应？</p>
<p>前端和用户实现交互，依靠的是界面。</p>
<p>这里的反应就是作出对界面的反应。那对界面作出哪些反应（或者说怎么作出反应）？</p>
<p>答：数据变化、事件的发生。</p>
<p>所以也有说法就是把 React 的实现称之为一个“状态机”，是一个帮助开发者管理变化的状态，比如我们上面说的数据变化、事件变化。</p>
<blockquote>
<p>为什么这么起名参考下面两篇文章</p>
<p><a class="link"   href="https://www.quora.com/Where-did-the-name-React-in-React-js-come-from" >https://www.quora.com/Where-did-the-name-React-in-React-js-come-from<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.quora.com/Why-is-React-called-React" >https://www.quora.com/Why-is-React-called-React<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="React-是如何产生的？"><a href="#React-是如何产生的？" class="headerlink" title="React 是如何产生的？"></a>React 是如何产生的？</h3><p>参考这篇文章：<a class="link"   href="https://segmentfault.com/a/1190000013365426" >https://segmentfault.com/a/1190000013365426<i class="fas fa-external-link-alt"></i></a></p>
<p>上面那篇文章是这个视频中的 ppt 翻译：<a class="link"   href="https://www.youtube.com/watch?v=tXeBZ3WujTs" >https://www.youtube.com/watch?v=tXeBZ3WujTs<i class="fas fa-external-link-alt"></i></a></p>
<p>官网的说明：<a class="link"   href="https://reactjs.org/blog/2013/06/05/why-react.html" >https://reactjs.org/blog/2013/06/05/why-react.html<i class="fas fa-external-link-alt"></i></a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>新事物的产生是很不容易的：<a class="link"   href="https://medium.com/@leeb/why-invest-in-tools-3240ce289930" >https://medium.com/@leeb/why-invest-in-tools-3240ce289930<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p>React was laughed at by the JavaScript community when it open sourced 2 years ago, and for the first few months of its existence internally at Facebook many (including myself) thought it was a bad idea. <a class="link"   href="https://www.facebook.com/jordwalke" >Jordan Walke<i class="fas fa-external-link-alt"></i></a> was stubborn in all the right ways and his idealism eventually found impact. We thought he was crazy, and he is, but he was also on to something. React has changed the way we build things across <em>all</em> platforms. <a class="link"   href="https://www.facebook.com/adamjernst" >Adam Ernst<i class="fas fa-external-link-alt"></i></a> borrowed these ideas and built <a class="link"   href="http://componentkit.org/" >ComponentKit<i class="fas fa-external-link-alt"></i></a> for iOS which was met at first by great skepticism by our internal iOS teams. It too dramatically changed the way we build software for iOS.</p>
</blockquote>
<p><strong>问题：</strong></p>
<p>我们经常说库和开发框架，怎么区分库和开发框架？</p>
<hr>
<h2 id="React-特点"><a href="#React-特点" class="headerlink" title="React 特点"></a>React 特点</h2><h3 id="1、声明式"><a href="#1、声明式" class="headerlink" title="1、声明式"></a>1、声明式</h3><p>你只需要描述 UI（HTML）看起来是什么样的，就跟写 HTML 一样即可。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX</span></span><br><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>注意上面的代码是在 .js 文件中，回想一下之前你想在 js 中创建标签的写法</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>声明式：声明你想要的结果，过程不用你操心。</p>
<p>再比如遍历数组的方式：</p>
<p>array.forEach、array.map 就是声明式</p>
<p>for(let i &#x3D; 0; i&lt;arr.length; i++){console.log(arr[i])} 就是命令式。</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>产品经理 &lt;&#x3D;&#x3D;&gt; 程序员</p>
<p>专家画家&lt;&#x3D;&#x3D;&gt;普通画家</p>
<h3 id="2、基于组件"><a href="#2、基于组件" class="headerlink" title="2、基于组件"></a>2、基于组件</h3><p>所谓基于组件其实就是基于“封装”，“封装” 这个从我们写代码开始的第一天一直就在做的事情。</p>
<p>或者说从软件行业诞生那一天起，就一直在做的事情。</p>
<p>封装是为了复用，所以说 “基于组件” 就是说用 React 写的 UI 库是可复用的。</p>
<p>什么是可复用？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>其实你从组件这个英文单词“component”的意思就能看出来，暗含着封装组合的意思。</p>
<img src="./images/component.png" alt="image-20220220223914397" style="zoom: 40%;" />

<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>基本上所有的编程语言都有组件这个概念，那到我们前端，这里封装就是指对“结构（HTML）、样式（CSS）、行为（JS）”的封装。</p>
<p>以前一直没有一个对于“组件”封装的统一标准，所以不同时期不同的前端库有不同的封装特点。</p>
<p>现在虽然有标准了，但还需要时间的考验，浏览器的支持等等很多工作要做。</p>
<blockquote>
<p>标准：<a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" >https://developer.mozilla.org/en-US/docs/Web/Web_Components<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="3、学习一次，随处使用"><a href="#3、学习一次，随处使用" class="headerlink" title="3、学习一次，随处使用"></a>3、学习一次，随处使用</h3><p>使用 react&#x2F;react-dom 可以开发 Web 应用</p>
<p>使用 react&#x2F;react-native 可以开发移动端原生安卓 和 iOS 应用</p>
<p>使用 react&#x2F;react-360 可以开发 VR（虚拟现实）应用</p>
<p>。。。。。。。。</p>
<p><img src="/ygd_blog_pub/images/%E5%AD%A6%E4%B9%A0%E4%B8%80%E6%AC%A1-%E9%9A%8F%E5%A4%84%E4%BD%BF%E7%94%A8.png" alt="image-20211006125918723"></p>
<p><strong>问题：</strong></p>
<p>什么是声明式 API？举例说明</p>
<p>封装“组件”的目的是什么？</p>
<hr>
<h2 id="其它前端开发库"><a href="#其它前端开发库" class="headerlink" title="其它前端开发库"></a>其它前端开发库</h2><p>React 是最流行的前端开发框架之一，其他：Vue、Angular 等等。</p>
<p>npm 下载趋势对比：<a class="link"   href="https://www.npmtrends.com/angular-vs-react-vs-vue" >https://www.npmtrends.com/angular-vs-react-vs-vue<i class="fas fa-external-link-alt"></i></a></p>
<p>从你的角度看 React 特点：</p>
<ul>
<li>工资高、大厂必备（阿里在用）</li>
<li>工资高、大厂必备（字节跳动在用）</li>
<li>工资高、大厂必备（百度、腾讯、京东、蚂蚁金服、拼多多、美团、外企、银行等都在用）</li>
</ul>
<blockquote>
<p>反驳一下：<a class="link"   href="https://www.zhihu.com/question/472193255/answer/2235015723" >https://www.zhihu.com/question/472193255/answer/2235015723<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<blockquote>
<p>一篇不错的文章</p>
<p>深入聊聊 JavaScript 框架：<a class="link"   href="https://mp.weixin.qq.com/s/fc_v8jGHVhV9wudJ5aS2rw" >https://mp.weixin.qq.com/s/fc_v8jGHVhV9wudJ5aS2rw<i class="fas fa-external-link-alt"></i></a></p>
<p>可以了解到为什么 JavaScript 框架进化到现在这个模样</p>
</blockquote>
<p><strong>问题：</strong></p>
<p>如何看待 Vue 和 React 的 XXX 大战？</p>
<p>自己要学习分析问题，要学会根据数据判断一个观点。直到自己的决定。</p>
<p>如何根据数据决定自己的判断：百度指数、google 指数。</p>
<hr>
<h2 id="React-初步体验"><a href="#React-初步体验" class="headerlink" title="React 初步体验"></a>React 初步体验</h2><h3 id="搭建-React-开发环境"><a href="#搭建-React-开发环境" class="headerlink" title="搭建 React 开发环境"></a>搭建 React 开发环境</h3><p><strong>背景：</strong></p>
<p>经常听到的名词：前端工程化、单页应用（SPA）</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>命令行工具：create-react-app</p>
<p>Facebook 官方出的工具：<a class="link"   href="https://create-react-app.dev/" >https://create-react-app.dev/<i class="fas fa-external-link-alt"></i></a></p>
<p>使用方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>npx 是 npm v5.2 版本新添加的命令，用来简化 npm 中工具包的使用。最大的特点是不需要全局安装这个工具即可使用。</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>看到如下提示表示项目创建成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Success! Created my-app at /xxx/yyy/xxx/my-app</span><br><span class="line">Inside that directory, you can run several commands:</span><br><span class="line"></span><br><span class="line">  npm start</span><br><span class="line">    Starts the development server.</span><br><span class="line"></span><br><span class="line">  npm run build</span><br><span class="line">    Bundles the app into static files <span class="keyword">for</span> production.</span><br><span class="line"></span><br><span class="line">  npm <span class="built_in">test</span></span><br><span class="line">    Starts the <span class="built_in">test</span> runner.</span><br><span class="line"></span><br><span class="line">  npm run eject</span><br><span class="line">    Removes this tool and copies build dependencies, configuration files</span><br><span class="line">    and scripts into the app directory. If you <span class="keyword">do</span> this, you can’t go back!</span><br><span class="line"></span><br><span class="line">We suggest that you begin by typing:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span> my-app</span><br><span class="line">  npm start</span><br><span class="line"></span><br><span class="line">Happy hacking!</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>npx 命令解释说明</p>
<p><strong>以前：</strong></p>
<p>运行一个基于 node 开发的工具，需要全局安装到电脑上。</p>
<p>或者在 npm 项目中</p>
<ul>
<li>直接访问项目根目录下“node_modules&#x2F;.bin&#x2F;react-scripts start”对应的二进制命令文件。</li>
<li>或者配置到 package.json 中的 scripts 属性里面，配置为一个命令。</li>
</ul>
<p><strong>现在：</strong></p>
<ul>
<li>npx 会检查当前目录下是否有这个工具，没有则下载到一个临时目录并调用之后删除。</li>
<li>好处是不用全局安装命令行工具，还可以指定版本使用</li>
</ul>
<p><strong>问题：</strong></p>
<p>如何在项目目录下访问一个二进制命令？</p>
<p>答： <code>node_modules/.bin/react-scripts start </code></p>
<p>效果和<code>npm start</code>是同样的效果</p>
<p>Vue: <a class="link"   href="https://blog.jijian.link/2021-03-26/npx-create-vue/" >https://blog.jijian.link/2021-03-26/npx-create-vue/<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<h3 id="React-脚手架项目目录结构说明"><a href="#React-脚手架项目目录结构说明" class="headerlink" title="React 脚手架项目目录结构说明"></a>React 脚手架项目目录结构说明</h3><p>总结 public 目录知识总结</p>
<ul>
<li>public&#x2F;favicon.ico</li>
<li>public&#x2F;manifest.json，了解 PWA 应用</li>
<li>public&#x2F;robots.txt</li>
</ul>
<p>回顾 webpack 打包代码流程</p>
<p>webpack 打包后的 js 代码位置使用了 <code>&lt;script defer&gt;&lt;/script&gt;</code> 形式。</p>
<p>以前是在 body 标签结束之前。</p>
<blockquote>
<p>参考：</p>
<p><code>&lt;script&gt;&lt;/script&gt;</code> 、 <code>&lt;script defer &gt;&lt;/script&gt;</code> 、 <code>&lt;script async&gt;&lt;/script&gt;</code> 三者的区别</p>
<p><a class="link"   href="https://www.cnblogs.com/jiasm/p/7683930.html" >https://www.cnblogs.com/jiasm/p/7683930.html<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><strong>练习：</strong></p>
<p>创建一个 React 脚手架 项目</p>
<p><strong>注意：</strong></p>
<p>如果删除 public&#x2F;manifest.json 文件后，在 index.html 文件中也要把对应的引用删除。</p>
<p>否则运行会报警告。但是不影响运行。</p>
<hr>
<h3 id="React-的基本使用"><a href="#React-的基本使用" class="headerlink" title="React 的基本使用"></a>React 的基本使用</h3><p><strong>知识回顾：</strong></p>
<p>需求：</p>
<ul>
<li>在浏览器页面上渲染一个 h1 标签，标签内显示“Hello React”。</li>
<li>h1 标签包含在 div 标签内，div 标签有一个 id 属性值为 “root”。</li>
</ul>
<p>代码：<a class="link"   href="https://gitee.com/ycomputer/react-basic" >https://gitee.com/ycomputer/react-basic<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>使用 React 在页面上渲染一个元素</strong></p>
<ol>
<li>导入<code>react</code>和<code>react-dom</code></li>
<li>创建 react 元素(虚拟 DOM)</li>
<li>渲染 react 元素到页面中</li>
</ol>
<p><strong>核心代码</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入react和react-dom</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建元素</span></span><br><span class="line"><span class="keyword">const</span> h1 = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello React&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染react元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(h1, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>练习</strong></p>
<ol>
<li>创建一个 p 标签，包含“月薪过万”文本</li>
<li>给 p 标签添加一个 id&#x3D;123 的属性</li>
<li>给 p 标签添加一个 class 选择器，并将字体颜色设置为‘red’</li>
<li>创建一个 div 标签，包含上面创建的 p 标签</li>
<li>创建如下结构</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>探索：</strong></p>
<p>创建一个非 w3c 规范的 html 标签会怎样？</p>
<p><strong>说明：</strong></p>
<p>创建 React 元素指定标签属性时，class 要使用 className，label 标签的 for 属性要指定为 htmlFor</p>
<p>背后的原因是，创建 React 元素的上下文环境是 .js 环境，这里的 class 和 for 属性和 JavaScript 的 class 和 for 关键字重名</p>
<p><strong>思考：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建元素</span></span><br><span class="line"><span class="keyword">const</span> h1 = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello React&#x27;</span>)</span><br><span class="line"><span class="comment">// 这个 h1 是啥？</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="参考-补充-问题集"><a href="#参考-补充-问题集" class="headerlink" title="参考-补充-问题集"></a>参考-补充-问题集</h2><h3 id="npm-命令参考"><a href="#npm-命令参考" class="headerlink" title="npm 命令参考"></a>npm 命令参考</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// npm 查看配置命令</span><br><span class="line">npm config list //查看基本配置</span><br><span class="line">npm config list -l //查看所有配置</span><br><span class="line"></span><br><span class="line">// 查看镜像配置命令</span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line">// 设置镜像命令</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">// 淘宝更新镜像域名：https://zhuanlan.zhihu.com/p/432578145</span><br><span class="line"></span><br><span class="line">// 查看缓存目录（windows和mac缓存目录不同）</span><br><span class="line">npm config get cache</span><br><span class="line">一般来说，默认的路径是这样的：</span><br><span class="line">win系统的路径基础是：%APPDATA%/npm-cache/</span><br><span class="line">mac系统下路径基础是：~/.npm/</span><br><span class="line"></span><br><span class="line">// npm 强制删除缓存</span><br><span class="line">npm cache clean -f</span><br><span class="line">npm cache clean --force</span><br><span class="line"></span><br><span class="line">// npm本地安装与全局安装有什么区别？</span><br><span class="line">npm install grunt // 本地安装，则是将模块下载到当前命令行所在目录。</span><br><span class="line">npm install -g grunt//全局安装，模块将被下载安装到【全局目录】中；</span><br><span class="line">// npm如何获取全局安装的默认目录</span><br><span class="line">npm config get prefix</span><br><span class="line"></span><br><span class="line">// npm如何设置全局安装的默认目录？不建议这样做，可能导致相关工具链失效</span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;新的目录&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="create-react-app-使用问题集"><a href="#create-react-app-使用问题集" class="headerlink" title="create-react-app 使用问题集"></a>create-react-app 使用问题集</h3><p>&#x2F;&#x2F; 权限问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R 501:20 <span class="string">&quot;/Users/xieqing/.npm&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用 npx 出现 npm ERR! code ENOLOCAL 问题</p>
<p><a class="link"   href="https://blog.csdn.net/weixin_48299611/article/details/115858140" >https://blog.csdn.net/weixin_48299611/article/details/115858140<i class="fas fa-external-link-alt"></i></a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>npm 如何查看缓存目录？如何强制清除缓存</p>
<p><a class="link"   href="https://newsn.net/say/npm-cache.html" >https://newsn.net/say/npm-cache.html<i class="fas fa-external-link-alt"></i></a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>针对 npm ERR! cb() never called! 问题</p>
<p><a class="link"   href="https://www.cnblogs.com/ssf-ll/p/12797117.html" >https://www.cnblogs.com/ssf-ll/p/12797117.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43299180/article/details/111283495" >https://blog.csdn.net/weixin_43299180/article/details/111283495<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/wdd00/p/14230656.html" >https://www.cnblogs.com/wdd00/p/14230656.html<i class="fas fa-external-link-alt"></i></a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>npm 安装依赖时报错， Unexpected end of JSON input while parsing near ‘….0”,”babel-eslint”:”^’</p>
<p><a class="link"   href="https://www.cnblogs.com/linjiu0505/p/11956271.html" >https://www.cnblogs.com/linjiu0505/p/11956271.html<i class="fas fa-external-link-alt"></i></a></p>
<p>npm 安装报错–“Unexpected end of JSON input while parsing near···”错误解决方案</p>
<p><a class="link"   href="https://blog.csdn.net/slyslyme/article/details/86421820" >https://blog.csdn.net/slyslyme/article/details/86421820<i class="fas fa-external-link-alt"></i></a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<h3 id="低版本-node-运行-create-react-app-解决方案"><a href="#低版本-node-运行-create-react-app-解决方案" class="headerlink" title="低版本 node 运行 create-react-app 解决方案"></a>低版本 node 运行 create-react-app 解决方案</h3><p>方案 1: 运行时指定运行版本即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app@3.4.0 xxx --scripts-version 4.0.3 --use-npm</span><br></pre></td></tr></table></figure>

<p>上面是网络搜索和自己探索的结果，现在还不清楚 create-react-app 版本和 scripts-version 版本之间的关系</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>方案 2: 从以前低 node 版本项目中拷贝一份 package.json 文件后 npm install</p>
<p>总结：</p>
<p>上面的问题应该是短时间才会存在的，后续大家都升级了也就没事了。</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/ygd_blog_pub/2022/01/15/hello-world/</url>
    <content><![CDATA[<!-- category 文章分类 -->
<!-- tag 文章标签 -->

<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>哈哈哈哈</title>
    <url>/ygd_blog_pub/2022/01/10/asdasd/</url>
    <content><![CDATA[<h1 id="asdasd"><a href="#asdasd" class="headerlink" title="asdasd"></a>asdasd</h1><p>你好</p>
<img src="https://cdn.jsdelivr.net/gh/3-ygd/image-hosting@master/image-hosting/1.6idsgm0jaho0.webp">

<img src="https://raw.githubusercontent.com/3-ygd/image-hosting/master/image-hosting/5.5k4q4q86po80.webp">
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
