<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JSX</title>
    <url>/blog/2022/03/18/02-JSX/</url>
    <content><![CDATA[<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>知道什么什么是 JSX</li>
<li>能够使用 JSX 完成基本的条件渲染和列表渲染</li>
<li>能够在 JSX 中进行样式处理</li>
</ul>
<hr>
<h2 id="为什么使用-JSX"><a href="#为什么使用-JSX" class="headerlink" title="为什么使用 JSX"></a>为什么使用 JSX</h2><p>同学们阅读下面的代码，它想表达的的 html 结构是什么样的？</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;购物列表&#x27;</span>),</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;ul&#x27;</span>, <span class="literal">null</span>, <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;华为&#x27;</span>), <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;iPhone&#x27;</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>给出下面的结构，使用 React 基本 api 创建并显示到页面上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>请问同学使用 React API 创建页面的感受？</p>
<p>繁琐、不直观，无法一眼看出所描述的结构、开发体验不好</p>
<hr>
<h2 id="JSX-介绍和使用步骤"><a href="#JSX-介绍和使用步骤" class="headerlink" title="JSX 介绍和使用步骤"></a>JSX 介绍和使用步骤</h2><h3 id="JSX-介绍"><a href="#JSX-介绍" class="headerlink" title="JSX 介绍"></a>JSX 介绍</h3><p>JSX 是 XML-like 的 JS 语法拓展。</p>
<p>就是拓展了 JS 的语法，这个语法和 XML 的语法很像。</p>
<p>有的时候也被叫做 JavaScript XML。</p>
<blockquote>
<p>官方文档：</p>
<p><a class="link"   href="https://facebook.github.io/jsx/" >https://facebook.github.io/jsx/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://en.wikipedia.org/wiki/JSX_(JavaScript)" >https://en.wikipedia.org/wiki/JSX_(JavaScript)<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>JSX 语法的特点就是，让我们可以在 Javascript 代码中写 XML(HTML) 格式的代码</p>
<p>这种视图的构建模式一般称之为：声明式视图构建模式。问题：什么是命令式视图构建？</p>
<p>这种对于开发者来说，语法直观、学习成本低、开发效率高，大大减少了原生 DOM 操作。</p>
<p>以前 DOM 操作的效率、水平高低由开发者决定，现在是框架搞定。</p>
<p><strong>JSX 是 React 声明式的视图构建模式的体现，是 React 最大的特点，也是现在流行的前端框架设计理念</strong></p>
<h3 id="JSX-的使用"><a href="#JSX-的使用" class="headerlink" title="JSX 的使用"></a>JSX 的使用</h3><p>接下来我们就来体验一下 JSX 语法。</p>
<p>直接在 .js 代码中声明一个标签，格式和 html 标签中相同。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 react 元素</span></span><br><span class="line"><span class="comment">// 原来</span></span><br><span class="line"><span class="comment">// const h1 = React.createElement(&#x27;h1&#x27;, null, &#x27;Hello React&#x27;)</span></span><br><span class="line"><span class="comment">//现在</span></span><br><span class="line"><span class="keyword">const</span> h1 = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 react 元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(h1, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>使用 JSX 完成笔记开头的需求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 JSX 语法代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 react 元素</span></span><br><span class="line"><span class="keyword">const</span> el = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 react 元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(el, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>我们说 JSX 不是标准的 JS 语法，是 JS 的语法扩展。</p>
<p>之所以上面的代码没有报错，是因为我们的 React 脚手架项目中内置了 JSX 语法解析器，用来解析该语法。</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>使用步骤总结</p>
<ol>
<li>导入 ReactDOM 包</li>
<li>使用 JSX 创建 react 元素</li>
<li>将 react 元素渲染到页面中</li>
</ol>
<p><strong>完整代码</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import React from &#x27;react&#x27; // React 17之后无需再引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 react 元素</span></span><br><span class="line"><span class="keyword">const</span> h1 = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 react 元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(h1, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import React from &#x27;react&#x27; // React 17之后无需再引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 react 元素</span></span><br><span class="line"><span class="keyword">const</span> el = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 react 元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(el, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<p>React 脚手架项目中 .js 文件中可以直接声明 html 标签的背后原因</p>
<p>在线环境：<a class="link"   href="https://www.babeljs.cn/" >https://www.babeljs.cn/<i class="fas fa-external-link-alt"></i></a></p>
<p>注意点：</p>
<img src="./images/jsx-compiler.png" alt="image-20220220233730589" style="zoom:80%;" />

<p>JSX 语法转换的两种方式的差异点：</p>
<p>从 React 17 之后加入的，优点</p>
<img src="./images/jsx-good.png" alt="image-20220220234223353" style="zoom:80%;" />

<blockquote>
<p>官方说明</p>
<p><a class="link"   href="https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html" >https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<hr>
<h3 id="JSX-使用注意点"><a href="#JSX-使用注意点" class="headerlink" title="JSX 使用注意点"></a>JSX 使用注意点</h3><ol>
<li>React17 版本之后，使用 JSX 不再需要额外导入 React</li>
<li>在 React 中所有标签都要闭合 &#x2F;&gt;，无论你是不是自闭和标签</li>
<li>声明的 JSX 结构必须要有一个根节点， 如果没有根节点，可以使用<code>&lt;&gt;&lt;/&gt;</code>（幽灵节点）或者<code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code>包裹</li>
<li>JSX 结构中声明的标签，属性名使用驼峰命名法： onclick &#x3D;&gt; onClick、<code>class</code> &#x3D;&gt; <code>className</code>、<code>for</code> &#x3D;&gt; <code>htmlFor</code></li>
<li>JSX 可以换行，如果 JSX 有多行，推荐使用<code>()</code>包裹 JSX，防止 JS 自动插入分号陷阱</li>
</ol>
<ul>
<li><a class="link"   href="https://blog.csdn.net/qq_36391954/article/details/79366383" >https://blog.csdn.net/qq_36391954/article/details/79366383<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<hr>
<h2 id="开发工具设置"><a href="#开发工具设置" class="headerlink" title="开发工具设置"></a>开发工具设置</h2><h3 id="使用-prettier-插件"><a href="#使用-prettier-插件" class="headerlink" title="使用 prettier 插件"></a>使用 prettier 插件</h3><p><strong>目标</strong>：学习如何配置 vscode 插件进行代码格式化</p>
<p><strong>内容</strong></p>
<ul>
<li><p>prettier 插件是一个代码格式化插件，可以格式化 react 代码</p>
</li>
<li><p>安装插件</p>
</li>
</ul>
<p><img src="/blog/images/image-20211006151941639.png" alt="image-20211006151941639"></p>
<ul>
<li>添加 prettier 的配置</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存的时候用使用prettier进行格式化</span></span><br><span class="line"><span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 默认使用prittier作为格式化工具</span></span><br><span class="line"><span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要有分号</span></span><br><span class="line"><span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 使用单引号</span></span><br><span class="line"><span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h3 id="vscode-配置自动补全"><a href="#vscode-配置自动补全" class="headerlink" title="vscode 配置自动补全"></a>vscode 配置自动补全</h3><p><strong>目标</strong>：配置 vscode，在 vscode 中使用 tab 键可以快速生成 HTML 内容</p>
<p><strong>内容</strong>：</p>
<p>​ 无需安装额外插件，直接在设置中添加如下设置即可。</p>
<p><strong>核心代码</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 js 文件中启用 emmet 语法</span></span><br><span class="line"><span class="attr">&quot;emmet.includeLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javascriptreact&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 按tab键展开 emmet 语法</span></span><br><span class="line"><span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="JSX-中使用-JavaScript-表达式"><a href="#JSX-中使用-JavaScript-表达式" class="headerlink" title="JSX 中使用 JavaScript 表达式"></a>JSX 中使用 JavaScript 表达式</h2><p><strong>思考：</strong></p>
<ul>
<li><p>JSX 语法是好用，但是这和写静态 html 标签好像没有什么区别？</p>
</li>
<li><p>如何在 JSX 标签中动态显示数据？</p>
<ul>
<li>数据定义在哪里？</li>
<li>JSX 定义在哪里？</li>
</ul>
</li>
<li><p>大胆猜想，既然 JSX 是直接写在 JS 中的，那 JS 当中的变量或函数应该可以在 JSX 中访问</p>
</li>
</ul>
<p><strong>访问语法：</strong></p>
<p><code>&#123; JavaScript 表达式 &#125;</code></p>
<p>JS 表达式：数据类型和运算符的组合（可以单独出现数据类型，也可以数据类型+运算符的组合）</p>
<p>表达式就是一个值，一个可以在栈内存分配的值。</p>
<ul>
<li>字符串、数值、布尔值、null、undefined、object（ [] &#x2F; {} ）</li>
<li>1 + 2、’abc’.split(‘’)、[‘a’, ‘b’].join(‘-‘)</li>
<li>function fn() {}、 fn()</li>
</ul>
<p><strong>技巧：</strong></p>
<p>验证是不是 JS 表达式的技巧：看内容能不能作为方法的参数，比如，<code>console.log( 表达式 )</code></p>
<hr>
<p>代码举例：</p>
<p>在 JSX 结构中访问以下数据类型</p>
<ol>
<li>字符串类型</li>
<li>数字类型</li>
<li>数组类型</li>
<li>对象类型</li>
<li>三元表达式</li>
<li>函数类型</li>
<li>JSX 表达式类型</li>
<li>渲染一张图片</li>
</ol>
<p>代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串类型</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"><span class="comment">// 数字类型</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="comment">// 数组类型</span></span><br><span class="line"><span class="keyword">const</span> hobbies = [<span class="string">&#x27;吃饭&#x27;</span>, <span class="string">&#x27;睡觉&#x27;</span>, <span class="string">&#x27;打豆豆&#x27;</span>]</span><br><span class="line"><span class="comment">// 对象类型</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Rose&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="comment">// 三元表达式</span></span><br><span class="line"><span class="comment">// 问 1 &amp;gt; 0 吗？&#123;1&gt;0 ? &#x27;是的&#x27;: &#x27;不是&#x27;&#125;</span></span><br><span class="line"><span class="comment">// 函数类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fun</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是函数返回的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JSX表达式类型</span></span><br><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是jsx表达式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 react 元素</span></span><br><span class="line"><span class="keyword">const</span> el = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Hello &#123;name&#125;，我今年&#123;age&#125;岁</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>&#123;hobbies.join(&#x27;,&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;obj.name&#125; 年龄：&#123;obj.age&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>问 1 <span class="symbol">&amp;gt;</span> 0 吗？&#123;1 &gt; 0 ? &#x27;是的&#x27; : &#x27;不是&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;fun()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;jsx&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>JSX 中的注释</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 快键键 ctrl + / */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ol>
<li>JSX 中的 {}内，可以出现任意的 js 表达式（除了 object {}）</li>
<li>JSX 中的 {}内，不能出现 js 语句，比如<code>if</code>、<code>for</code>、<code>while</code>等</li>
<li>函数不能直接出现在标签内部的{}内，但是函数调用可以。</li>
<li>函数可以作为标签属性出现在{}内，比如：事件处理程序的绑定。</li>
</ol>
<hr>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>什么是条件渲染？</p>
<p>条件是谁？</p>
<p>渲染是谁？</p>
<p>条件在哪？</p>
<p>渲染在哪？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>条件和渲染是如何结合在一起的？</p>
<p>同学们回想一下，vue 中条件和渲染是怎么结合在一起的？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>那如何将 react 中条件（JS 中的数据）和渲染（JSX 结构）该如何结合在一起？</p>
<p>答：通过，函数、三元运算符、逻辑与（&amp;&amp;）运算符</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p><strong>举例：</strong></p>
<p>现有如下需求：</p>
<p>ajax 发起异步请求数据的过程中和数据返回后，页面渲染的 UI 不同。</p>
<p>在 react 中如何实现？</p>
<p><strong>代码</strong></p>
<ul>
<li>通过判断<code>if/else</code>控制</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX 中的 条件 渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件</span></span><br><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染（UI）</span></span><br><span class="line"><span class="keyword">const</span> loadingUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据加载中！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> successUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据请求成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 条件和渲染结合在一起了（对比vue的条件和渲染的结合）</span></span><br><span class="line">  <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">    <span class="keyword">return</span> loadingUI</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> successUI</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;loadData()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(jsx, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>通过三元运算符控制</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX 中的 条件 渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件</span></span><br><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染（UI）</span></span><br><span class="line"><span class="keyword">const</span> loadingUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据加载中！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> successUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据请求成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元表达式</span></span><br><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;isLoading ? loadingUI : successUI&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(jsx, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>逻辑与（&amp;&amp;）运算符</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX 中的 条件 渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件</span></span><br><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染（UI）</span></span><br><span class="line"><span class="keyword">const</span> loadingUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据加载中！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> successUI = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据请求成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;isLoading &amp;&amp; loadingUI&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(jsx, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>什么是列表渲染？</p>
<p>列表是谁？</p>
<p>渲染是谁？</p>
<p>列表在哪？</p>
<p>渲染在哪？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>列表和渲染如何结合在一起？</p>
<p>同学们回想一下，vue 中列表和渲染是怎么结合在一起的？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>React 中该如何列表（JS 数组）和渲染（每一个数组元素对应的 UI）结合在一起？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>观察一下上面刚刚学习的在 JSX 中渲染数组的规律？</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books1 = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>]</span><br><span class="line">&lt;div&gt;&#123;books1&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>结合上面的知识，和规律</p>
<p>我们是否可以这样定义一个数组</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books = [<span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>, <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>, <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>]</span><br></pre></td></tr></table></figure>

<p>渲染这个数组</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;books&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>实际开发当中服务器端是不可能给我们返回这样结构的数据的</p>
<p>我们拿到的数据都是这样的</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books1 = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>那现在的问题就转化为：如何把 books1 数组转换为 books2 的问题</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books2 = [<span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>, <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>, <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>]</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>数组内容格式转换，使用数组的 map 方法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books1 = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> books2 = books1.<span class="title function_">map</span>(<span class="function"><span class="params">book</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;book&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul = <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;books2&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>或直接在 JSX 中渲染</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books1 = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;books1.map(book =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;book&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>最后在遍历时添加 key 属性</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books1 = [<span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;Angular&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;books1.map((book, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;book&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ul>
<li>场景：重复生成相同的 HTML 结构，比如，歌曲列表、商品列表等</li>
<li>实现：使用数组的 <code>map</code> 方法进行格式转换</li>
<li>注意：需要为遍历项添加 <code>key</code> 属性<ul>
<li>key 在 HTML 结构中是看不到的，是 React 内部用来进行性能优化时使用的</li>
<li>key 在当前列表中要唯一</li>
<li>如果列表中有像 id 这种的唯一值，就用 id 来作为 key 值</li>
<li>如果列表中没有像 id 这种的唯一值，就可以使用 index（下标）来作为 key 值</li>
</ul>
</li>
</ul>
<p><strong>练习：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 列表渲染如下数据</span></span><br><span class="line"><span class="keyword">const</span> books = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;React&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Angular&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h2><p><strong>目标</strong>：掌握 jsx 中如何通过 style 和 className 控制元素的样式</p>
<p><strong>内容</strong>：</p>
<ol>
<li>行内样式 - style<ol>
<li>默认情况像 width&#x2F;height 等属性，可以省略 px，直接使用 <code>数值</code> 即可。如果有其它单位显示需求，直接在数值后跟单位即可<code>&#123;widht: &#39;10rem&#39;&#125;</code> ， <code>&#123;widht: &#39;10vw&#39;&#125;</code>。</li>
<li>如果是需要使用百分比的单位，此时，继续使用字符串的值即可（比如，<code>&quot;60%&quot;</code>）</li>
</ol>
</li>
<li>类名 - className【推荐】</li>
</ol>
<p><strong>核心代码：</strong></p>
<ul>
<li><p>行内样式-style</p>
<ul>
<li><p>浏览器需要的</p>
</li>
<li><p>&#96;&#96;&#96;html</p>
<h1 style="color: red; background-color: pink; width: 300px;">Hello React</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- React 中定义的</span><br><span class="line"></span><br><span class="line">- ```jsx</span><br><span class="line">  const h1 = &lt;h1 style=&#123;&#123; color: &#x27;red&#x27;, backgroundColor: &#x27;pink&#x27;, width: 300 &#125;&#125;&gt;Hello React&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>类名-className</p>
<ul>
<li><p>浏览器需要的</p>
</li>
<li><p>&#96;&#96;&#96;html</p>
<h1 class="p-title">Hello React</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- React 中定义的</span><br><span class="line"></span><br><span class="line">- ```jsx</span><br><span class="line">  // 导入样式</span><br><span class="line">  import &#x27;./base.css&#x27;</span><br><span class="line">  const dv = &lt;div className=&#123;&#x27;p-title&#x27;&#125;&gt;style样式&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>思考：</strong></p>
<p>如何让样式实现条件设置（动态设置）？</p>
<hr>
<h2 id="JSX-总结"><a href="#JSX-总结" class="headerlink" title="JSX 总结"></a>JSX 总结</h2><ul>
<li>React 使用 JSX 来编写 UI（HTML）</li>
<li><strong>React 完全利用 JS 语言自身的能力来增强 UI 的编写</strong> - <strong>能用 JS 来实现的功能绝不会增加一个新的 API</strong></li>
<li>现在，就可以使用 React 来编写任意 UI 结构了</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX</span></span><br><span class="line">&lt;div&gt;&#123;<span class="variable constant_">JS</span> 表达式&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>一句话总结：</strong></p>
<p><strong>只要是在 JSX 结构中访问 JS 中的数据加上一个 {} 即可。React 后续所有的处理逻辑基本上都是在这个基础上延伸出来的。</strong></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>JSX</tag>
      </tags>
  </entry>
  <entry>
    <title>哈哈哈哈</title>
    <url>/blog/2022/01/10/asdasd/</url>
    <content><![CDATA[<h1 id="asdasd"><a href="#asdasd" class="headerlink" title="asdasd"></a>asdasd</h1><p>你好</p>
<img src="https://cdn.jsdelivr.net/gh/3-ygd/image-hosting@master/image-hosting/1.6idsgm0jaho0.webp">

<img src="https://raw.githubusercontent.com/3-ygd/image-hosting/master/image-hosting/5.5k4q4q86po80.webp">
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>React 的特点</title>
    <url>/blog/2022/01/10/01-React%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>说出 React 的特点</li>
<li>了解“声明式”和“命令式”术语</li>
<li>使用 React 脚手架工具创建 React 项目</li>
<li>了解 React 的基本 API</li>
</ul>
<hr>
<h2 id="React-介绍"><a href="#React-介绍" class="headerlink" title="React 介绍"></a>React 介绍</h2><img src="images/logo-react.jpeg" alt="image-20211006124106131" style="zoom:60%;" />

<h3 id="React-是什么？"><a href="#React-是什么？" class="headerlink" title="React 是什么？"></a>React 是什么？</h3><p>A JavaScript library for building user interfaces</p>
<p>用于构建用户界面的 JavaScript 库</p>
<p>我们经常说库和开发框架，怎么区分库和开发框架？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>React 是一个动词。意思是（作出）反应，化学反应。</p>
<p>之所以这么命名也是暗含了一定的设计理念就是作出反应。那对什么做出反应？</p>
<p>前端和用户实现交互，依靠的是界面。</p>
<p>这里的反应就是作出对界面的反应。那对界面作出哪些反应（或者说怎么作出反应）？</p>
<p>答：数据变化、事件的发生。</p>
<p>所以也有说法就是把 React 的实现称之为一个“状态机”，是一个帮助开发者管理变化的状态，比如我们上面说的数据变化、事件变化。</p>
<blockquote>
<p>为什么这么起名参考下面两篇文章</p>
<p><a class="link"   href="https://www.quora.com/Where-did-the-name-React-in-React-js-come-from" >https://www.quora.com/Where-did-the-name-React-in-React-js-come-from<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.quora.com/Why-is-React-called-React" >https://www.quora.com/Why-is-React-called-React<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="React-是如何产生的？"><a href="#React-是如何产生的？" class="headerlink" title="React 是如何产生的？"></a>React 是如何产生的？</h3><p>参考这篇文章：<a class="link"   href="https://segmentfault.com/a/1190000013365426" >https://segmentfault.com/a/1190000013365426<i class="fas fa-external-link-alt"></i></a></p>
<p>上面那篇文章是这个视频中的 ppt 翻译：<a class="link"   href="https://www.youtube.com/watch?v=tXeBZ3WujTs" >https://www.youtube.com/watch?v=tXeBZ3WujTs<i class="fas fa-external-link-alt"></i></a></p>
<p>官网的说明：<a class="link"   href="https://reactjs.org/blog/2013/06/05/why-react.html" >https://reactjs.org/blog/2013/06/05/why-react.html<i class="fas fa-external-link-alt"></i></a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>新事物的产生是很不容易的：<a class="link"   href="https://medium.com/@leeb/why-invest-in-tools-3240ce289930" >https://medium.com/@leeb/why-invest-in-tools-3240ce289930<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p>React was laughed at by the JavaScript community when it open sourced 2 years ago, and for the first few months of its existence internally at Facebook many (including myself) thought it was a bad idea. <a class="link"   href="https://www.facebook.com/jordwalke" >Jordan Walke<i class="fas fa-external-link-alt"></i></a> was stubborn in all the right ways and his idealism eventually found impact. We thought he was crazy, and he is, but he was also on to something. React has changed the way we build things across <em>all</em> platforms. <a class="link"   href="https://www.facebook.com/adamjernst" >Adam Ernst<i class="fas fa-external-link-alt"></i></a> borrowed these ideas and built <a class="link"   href="http://componentkit.org/" >ComponentKit<i class="fas fa-external-link-alt"></i></a> for iOS which was met at first by great skepticism by our internal iOS teams. It too dramatically changed the way we build software for iOS.</p>
</blockquote>
<p><strong>问题：</strong></p>
<p>我们经常说库和开发框架，怎么区分库和开发框架？</p>
<hr>
<h2 id="React-特点"><a href="#React-特点" class="headerlink" title="React 特点"></a>React 特点</h2><h3 id="1、声明式"><a href="#1、声明式" class="headerlink" title="1、声明式"></a>1、声明式</h3><p>你只需要描述 UI（HTML）看起来是什么样的，就跟写 HTML 一样即可。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX</span></span><br><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>注意上面的代码是在 .js 文件中，回想一下之前你想在 js 中创建标签的写法</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>声明式：声明你想要的结果，过程不用你操心。</p>
<p>再比如遍历数组的方式：</p>
<p>array.forEach、array.map 就是声明式</p>
<p>for(let i &#x3D; 0; i&lt;arr.length; i++){console.log(arr[i])} 就是命令式。</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>产品经理 &lt;&#x3D;&#x3D;&gt; 程序员</p>
<p>专家画家&lt;&#x3D;&#x3D;&gt;普通画家</p>
<h3 id="2、基于组件"><a href="#2、基于组件" class="headerlink" title="2、基于组件"></a>2、基于组件</h3><p>所谓基于组件其实就是基于“封装”，“封装” 这个从我们写代码开始的第一天一直就在做的事情。</p>
<p>或者说从软件行业诞生那一天起，就一直在做的事情。</p>
<p>封装是为了复用，所以说 “基于组件” 就是说用 React 写的 UI 库是可复用的。</p>
<p>什么是可复用？</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>其实你从组件这个英文单词“component”的意思就能看出来，暗含着封装组合的意思。</p>
<img src="./images/component.png" alt="image-20220220223914397" style="zoom: 40%;" />

<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>基本上所有的编程语言都有组件这个概念，那到我们前端，这里封装就是指对“结构（HTML）、样式（CSS）、行为（JS）”的封装。</p>
<p>以前一直没有一个对于“组件”封装的统一标准，所以不同时期不同的前端库有不同的封装特点。</p>
<p>现在虽然有标准了，但还需要时间的考验，浏览器的支持等等很多工作要做。</p>
<blockquote>
<p>标准：<a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" >https://developer.mozilla.org/en-US/docs/Web/Web_Components<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="3、学习一次，随处使用"><a href="#3、学习一次，随处使用" class="headerlink" title="3、学习一次，随处使用"></a>3、学习一次，随处使用</h3><p>使用 react&#x2F;react-dom 可以开发 Web 应用</p>
<p>使用 react&#x2F;react-native 可以开发移动端原生安卓 和 iOS 应用</p>
<p>使用 react&#x2F;react-360 可以开发 VR（虚拟现实）应用</p>
<p>。。。。。。。。</p>
<p><img src="/blog/images/%E5%AD%A6%E4%B9%A0%E4%B8%80%E6%AC%A1-%E9%9A%8F%E5%A4%84%E4%BD%BF%E7%94%A8.png" alt="image-20211006125918723"></p>
<p><strong>问题：</strong></p>
<p>什么是声明式 API？举例说明</p>
<p>封装“组件”的目的是什么？</p>
<hr>
<h2 id="其它前端开发库"><a href="#其它前端开发库" class="headerlink" title="其它前端开发库"></a>其它前端开发库</h2><p>React 是最流行的前端开发框架之一，其他：Vue、Angular 等等。</p>
<p>npm 下载趋势对比：<a class="link"   href="https://www.npmtrends.com/angular-vs-react-vs-vue" >https://www.npmtrends.com/angular-vs-react-vs-vue<i class="fas fa-external-link-alt"></i></a></p>
<p>从你的角度看 React 特点：</p>
<ul>
<li>工资高、大厂必备（阿里在用）</li>
<li>工资高、大厂必备（字节跳动在用）</li>
<li>工资高、大厂必备（百度、腾讯、京东、蚂蚁金服、拼多多、美团、外企、银行等都在用）</li>
</ul>
<blockquote>
<p>反驳一下：<a class="link"   href="https://www.zhihu.com/question/472193255/answer/2235015723" >https://www.zhihu.com/question/472193255/answer/2235015723<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<blockquote>
<p>一篇不错的文章</p>
<p>深入聊聊 JavaScript 框架：<a class="link"   href="https://mp.weixin.qq.com/s/fc_v8jGHVhV9wudJ5aS2rw" >https://mp.weixin.qq.com/s/fc_v8jGHVhV9wudJ5aS2rw<i class="fas fa-external-link-alt"></i></a></p>
<p>可以了解到为什么 JavaScript 框架进化到现在这个模样</p>
</blockquote>
<p><strong>问题：</strong></p>
<p>如何看待 Vue 和 React 的 XXX 大战？</p>
<p>自己要学习分析问题，要学会根据数据判断一个观点。直到自己的决定。</p>
<p>如何根据数据决定自己的判断：百度指数、google 指数。</p>
<hr>
<h2 id="React-初步体验"><a href="#React-初步体验" class="headerlink" title="React 初步体验"></a>React 初步体验</h2><h3 id="搭建-React-开发环境"><a href="#搭建-React-开发环境" class="headerlink" title="搭建 React 开发环境"></a>搭建 React 开发环境</h3><p><strong>背景：</strong></p>
<p>经常听到的名词：前端工程化、单页应用（SPA）</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>命令行工具：create-react-app</p>
<p>Facebook 官方出的工具：<a class="link"   href="https://create-react-app.dev/" >https://create-react-app.dev/<i class="fas fa-external-link-alt"></i></a></p>
<p>使用方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>npx 是 npm v5.2 版本新添加的命令，用来简化 npm 中工具包的使用。最大的特点是不需要全局安装这个工具即可使用。</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>看到如下提示表示项目创建成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Success! Created my-app at /xxx/yyy/xxx/my-app</span><br><span class="line">Inside that directory, you can run several commands:</span><br><span class="line"></span><br><span class="line">  npm start</span><br><span class="line">    Starts the development server.</span><br><span class="line"></span><br><span class="line">  npm run build</span><br><span class="line">    Bundles the app into static files <span class="keyword">for</span> production.</span><br><span class="line"></span><br><span class="line">  npm <span class="built_in">test</span></span><br><span class="line">    Starts the <span class="built_in">test</span> runner.</span><br><span class="line"></span><br><span class="line">  npm run eject</span><br><span class="line">    Removes this tool and copies build dependencies, configuration files</span><br><span class="line">    and scripts into the app directory. If you <span class="keyword">do</span> this, you can’t go back!</span><br><span class="line"></span><br><span class="line">We suggest that you begin by typing:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span> my-app</span><br><span class="line">  npm start</span><br><span class="line"></span><br><span class="line">Happy hacking!</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>npx 命令解释说明</p>
<p><strong>以前：</strong></p>
<p>运行一个基于 node 开发的工具，需要全局安装到电脑上。</p>
<p>或者在 npm 项目中</p>
<ul>
<li>直接访问项目根目录下“node_modules&#x2F;.bin&#x2F;react-scripts start”对应的二进制命令文件。</li>
<li>或者配置到 package.json 中的 scripts 属性里面，配置为一个命令。</li>
</ul>
<p><strong>现在：</strong></p>
<ul>
<li>npx 会检查当前目录下是否有这个工具，没有则下载到一个临时目录并调用之后删除。</li>
<li>好处是不用全局安装命令行工具，还可以指定版本使用</li>
</ul>
<p><strong>问题：</strong></p>
<p>如何在项目目录下访问一个二进制命令？</p>
<p>答： <code>node_modules/.bin/react-scripts start </code></p>
<p>效果和<code>npm start</code>是同样的效果</p>
<p>Vue: <a class="link"   href="https://blog.jijian.link/2021-03-26/npx-create-vue/" >https://blog.jijian.link/2021-03-26/npx-create-vue/<i class="fas fa-external-link-alt"></i></a></p>
<hr>
<h3 id="React-脚手架项目目录结构说明"><a href="#React-脚手架项目目录结构说明" class="headerlink" title="React 脚手架项目目录结构说明"></a>React 脚手架项目目录结构说明</h3><p>总结 public 目录知识总结</p>
<ul>
<li>public&#x2F;favicon.ico</li>
<li>public&#x2F;manifest.json，了解 PWA 应用</li>
<li>public&#x2F;robots.txt</li>
</ul>
<p>回顾 webpack 打包代码流程</p>
<p>webpack 打包后的 js 代码位置使用了 <code>&lt;script defer&gt;&lt;/script&gt;</code> 形式。</p>
<p>以前是在 body 标签结束之前。</p>
<blockquote>
<p>参考：</p>
<p><code>&lt;script&gt;&lt;/script&gt;</code> 、 <code>&lt;script defer &gt;&lt;/script&gt;</code> 、 <code>&lt;script async&gt;&lt;/script&gt;</code> 三者的区别</p>
<p><a class="link"   href="https://www.cnblogs.com/jiasm/p/7683930.html" >https://www.cnblogs.com/jiasm/p/7683930.html<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><strong>练习：</strong></p>
<p>创建一个 React 脚手架 项目</p>
<p><strong>注意：</strong></p>
<p>如果删除 public&#x2F;manifest.json 文件后，在 index.html 文件中也要把对应的引用删除。</p>
<p>否则运行会报警告。但是不影响运行。</p>
<hr>
<h3 id="React-的基本使用"><a href="#React-的基本使用" class="headerlink" title="React 的基本使用"></a>React 的基本使用</h3><p><strong>知识回顾：</strong></p>
<p>需求：</p>
<ul>
<li>在浏览器页面上渲染一个 h1 标签，标签内显示“Hello React”。</li>
<li>h1 标签包含在 div 标签内，div 标签有一个 id 属性值为 “root”。</li>
</ul>
<p>代码：<a class="link"   href="https://gitee.com/ycomputer/react-basic" >https://gitee.com/ycomputer/react-basic<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>使用 React 在页面上渲染一个元素</strong></p>
<ol>
<li>导入<code>react</code>和<code>react-dom</code></li>
<li>创建 react 元素(虚拟 DOM)</li>
<li>渲染 react 元素到页面中</li>
</ol>
<p><strong>核心代码</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入react和react-dom</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建元素</span></span><br><span class="line"><span class="keyword">const</span> h1 = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello React&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染react元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(h1, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>练习</strong></p>
<ol>
<li>创建一个 p 标签，包含“月薪过万”文本</li>
<li>给 p 标签添加一个 id&#x3D;123 的属性</li>
<li>给 p 标签添加一个 class 选择器，并将字体颜色设置为‘red’</li>
<li>创建一个 div 标签，包含上面创建的 p 标签</li>
<li>创建如下结构</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>探索：</strong></p>
<p>创建一个非 w3c 规范的 html 标签会怎样？</p>
<p><strong>说明：</strong></p>
<p>创建 React 元素指定标签属性时，class 要使用 className，label 标签的 for 属性要指定为 htmlFor</p>
<p>背后的原因是，创建 React 元素的上下文环境是 .js 环境，这里的 class 和 for 属性和 JavaScript 的 class 和 for 关键字重名</p>
<p><strong>思考：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建元素</span></span><br><span class="line"><span class="keyword">const</span> h1 = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello React&#x27;</span>)</span><br><span class="line"><span class="comment">// 这个 h1 是啥？</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="参考-补充-问题集"><a href="#参考-补充-问题集" class="headerlink" title="参考-补充-问题集"></a>参考-补充-问题集</h2><h3 id="npm-命令参考"><a href="#npm-命令参考" class="headerlink" title="npm 命令参考"></a>npm 命令参考</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// npm 查看配置命令</span><br><span class="line">npm config list //查看基本配置</span><br><span class="line">npm config list -l //查看所有配置</span><br><span class="line"></span><br><span class="line">// 查看镜像配置命令</span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line">// 设置镜像命令</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">// 淘宝更新镜像域名：https://zhuanlan.zhihu.com/p/432578145</span><br><span class="line"></span><br><span class="line">// 查看缓存目录（windows和mac缓存目录不同）</span><br><span class="line">npm config get cache</span><br><span class="line">一般来说，默认的路径是这样的：</span><br><span class="line">win系统的路径基础是：%APPDATA%/npm-cache/</span><br><span class="line">mac系统下路径基础是：~/.npm/</span><br><span class="line"></span><br><span class="line">// npm 强制删除缓存</span><br><span class="line">npm cache clean -f</span><br><span class="line">npm cache clean --force</span><br><span class="line"></span><br><span class="line">// npm本地安装与全局安装有什么区别？</span><br><span class="line">npm install grunt // 本地安装，则是将模块下载到当前命令行所在目录。</span><br><span class="line">npm install -g grunt//全局安装，模块将被下载安装到【全局目录】中；</span><br><span class="line">// npm如何获取全局安装的默认目录</span><br><span class="line">npm config get prefix</span><br><span class="line"></span><br><span class="line">// npm如何设置全局安装的默认目录？不建议这样做，可能导致相关工具链失效</span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;新的目录&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="create-react-app-使用问题集"><a href="#create-react-app-使用问题集" class="headerlink" title="create-react-app 使用问题集"></a>create-react-app 使用问题集</h3><p>&#x2F;&#x2F; 权限问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R 501:20 <span class="string">&quot;/Users/xieqing/.npm&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用 npx 出现 npm ERR! code ENOLOCAL 问题</p>
<p><a class="link"   href="https://blog.csdn.net/weixin_48299611/article/details/115858140" >https://blog.csdn.net/weixin_48299611/article/details/115858140<i class="fas fa-external-link-alt"></i></a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>npm 如何查看缓存目录？如何强制清除缓存</p>
<p><a class="link"   href="https://newsn.net/say/npm-cache.html" >https://newsn.net/say/npm-cache.html<i class="fas fa-external-link-alt"></i></a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>针对 npm ERR! cb() never called! 问题</p>
<p><a class="link"   href="https://www.cnblogs.com/ssf-ll/p/12797117.html" >https://www.cnblogs.com/ssf-ll/p/12797117.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43299180/article/details/111283495" >https://blog.csdn.net/weixin_43299180/article/details/111283495<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/wdd00/p/14230656.html" >https://www.cnblogs.com/wdd00/p/14230656.html<i class="fas fa-external-link-alt"></i></a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>npm 安装依赖时报错， Unexpected end of JSON input while parsing near ‘….0”,”babel-eslint”:”^’</p>
<p><a class="link"   href="https://www.cnblogs.com/linjiu0505/p/11956271.html" >https://www.cnblogs.com/linjiu0505/p/11956271.html<i class="fas fa-external-link-alt"></i></a></p>
<p>npm 安装报错–“Unexpected end of JSON input while parsing near···”错误解决方案</p>
<p><a class="link"   href="https://blog.csdn.net/slyslyme/article/details/86421820" >https://blog.csdn.net/slyslyme/article/details/86421820<i class="fas fa-external-link-alt"></i></a></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<h3 id="低版本-node-运行-create-react-app-解决方案"><a href="#低版本-node-运行-create-react-app-解决方案" class="headerlink" title="低版本 node 运行 create-react-app 解决方案"></a>低版本 node 运行 create-react-app 解决方案</h3><p>方案 1: 运行时指定运行版本即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app@3.4.0 xxx --scripts-version 4.0.3 --use-npm</span><br></pre></td></tr></table></figure>

<p>上面是网络搜索和自己探索的结果，现在还不清楚 create-react-app 版本和 scripts-version 版本之间的关系</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>方案 2: 从以前低 node 版本项目中拷贝一份 package.json 文件后 npm install</p>
<p>总结：</p>
<p>上面的问题应该是短时间才会存在的，后续大家都升级了也就没事了。</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/2022/01/15/hello-world/</url>
    <content><![CDATA[<!-- category 文章分类 -->
<!-- tag 文章标签 -->

<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JSX</title>
    <url>/blog/2022/03/20/99-React%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="React-常见报错"><a href="#React-常见报错" class="headerlink" title="React 常见报错"></a>React 常见报错</h1>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3前置</title>
    <url>/blog/2022/03/20/03-vue3%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>vue3前置</p>
<h2 id="Vue3基础介绍"><a href="#Vue3基础介绍" class="headerlink" title="Vue3基础介绍"></a>Vue3基础介绍</h2><p>2022-02-07 vue3 成为默认选项</p>
<h3 id="为什么要学习vue3"><a href="#为什么要学习vue3" class="headerlink" title="为什么要学习vue3"></a>为什么要学习vue3</h3><p>三个原因：</p>
<ol>
<li><p>Vue 是目前国内开发最火的前端框架之一</p>
<p><a class="link"   href="https://gitee.com/link?target=https://www.npmtrends.com/angular-vs-react-vs-vue" >react, vue, angular的下载趋势<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>社区生态已经逐步完善</p>
<table>
<thead>
<tr>
<th>组件（插件）名称</th>
<th>官方地址</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>ant-design-vue</td>
<td><a class="link"   href="https://gitee.com/link?target=https://antdv.com/docs/vue/introduce-cn/" >https://antdv.com/docs/vue/introduce-cn/<i class="fas fa-external-link-alt"></i></a></td>
<td>ant-design-vue 是 Ant Design 的 Vue 实现，组件的风格与 Ant Design 保持同步</td>
</tr>
<tr>
<td>element-plus</td>
<td><a class="link"   href="https://element-plus.gitee.io/#/zh-CN" >https://element-plus.gitee.io/#/zh-CN<i class="fas fa-external-link-alt"></i></a></td>
<td>Element Plus，一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库</td>
</tr>
<tr>
<td>vant</td>
<td><a class="link"   href="https://vant-contrib.gitee.io/vant/v3/#/zh-CN" >https://vant-contrib.gitee.io/vant/v3/#/zh-CN<i class="fas fa-external-link-alt"></i></a></td>
<td>有赞前端团队开源的移动端组件库，于 2016 年开源，已持续维护 4 年时间</td>
</tr>
<tr>
<td>Naive UI</td>
<td><a class="link"   href="https://gitee.com/link?target=https://www.naiveui.com/zh-CN/" >https://www.naiveui.com/zh-CN/<i class="fas fa-external-link-alt"></i></a></td>
<td>一个 Vue 3 组件库比较完整，主题可调，使用 TypeScript，不算太慢，有点意思</td>
</tr>
<tr>
<td>VueUse</td>
<td><a class="link"   href="https://gitee.com/link?target=https://vueuse.org/" >https://vueuse.org/<i class="fas fa-external-link-alt"></i></a></td>
<td>基于composition组合api的常用集合，小兔仙项目会部分使用</td>
</tr>
</tbody></table>
</li>
<li><p>积极拥抱新技术</p>
<p>2022 年 2 月 7 日，Vue3转正了</p>
</li>
</ol>
<h3 id="Vue3带来的新变化"><a href="#Vue3带来的新变化" class="headerlink" title="Vue3带来的新变化"></a>Vue3带来的新变化</h3><ol>
<li><p>性能提升（零成本：从vue2切到vue3就享受到）</p>
<p>首次渲染更快，diff算法更快，内存占用更少，打包体积更小，….</p>
</li>
<li><p>更好的TypeScript支持（在vue下写TS更方便了）</p>
</li>
<li><p>提供新的写代码的方式：<strong>Composition API</strong> <strong>（重点学习内容）</strong></p>
</li>
</ol>
<p>相关推荐</p>
<p> <a class="link"   href="https://vue3js.cn/docs/zh/" >Vue3 中文文档<i class="fas fa-external-link-alt"></i></a>  <a class="link"   href="https://vue3js.cn/vue-composition/" >Vue3 设计理念<i class="fas fa-external-link-alt"></i></a> </p>
<h3 id="这些Vue2-0的语法不能用了"><a href="#这些Vue2-0的语法不能用了" class="headerlink" title="这些Vue2.0的语法不能用了"></a>这些Vue2.0的语法不能用了</h3><p>vue3.0对于2.0版本的大部分语法都是可以兼容的（之前是怎么写的，现在也正常写），但是也有一些破坏性的语法更新，这个大家要格外注意</p>
<ol>
<li><p>移除了vue实例上的$on方法 （eventBus<code>Vue.prototype.$eventBus=new Vue(); this.$on(&#39;事件名&#39;， 回调)</code>现有实现模式不再支持，可以使用三方插件替代）。下边是vue2中eventBus的用法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$eventBus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line">组件<span class="number">1</span></span><br><span class="line"><span class="variable language_">this</span>.$on(<span class="string">&#x27;事件名&#x27;</span>, 回调)</span><br><span class="line">组件<span class="number">2</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;事件名&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>移除过滤器选项 。下边是vue2中过滤器的用法：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; msg | format&#125;&#125;&lt;/div&gt;</span><br><span class="line">插值表达式里, 不能再使用过滤器filter， 可以使用methods替代</span><br><span class="line">&#123;&#123;<span class="title function_">format</span>(msg)&#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>移除 .sync语法（v-bind时不能使用.sync修饰符了，现在它v-model语法合并了）。下边是vue2中.sync的用法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;el-dialog :visibel.<span class="property">sync</span>=<span class="string">&quot;showDialog&quot;</span>/&gt;  </span><br></pre></td></tr></table></figure></li>
</ol>
<p>更多阅读，参考<a class="link"   href="https://v3.cn.vuejs.org/guide/migration/introduction.html" >官网<i class="fas fa-external-link-alt"></i></a>。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li><p>vue3发布已久，相关生态基本成熟，是学习的好时机；</p>
</li>
<li><p>新变化：性能提升；更好支持TS; 提供compositionAPI;</p>
</li>
<li><p>抛弃了：$on, filter, .sync</p>
</li>
</ol>
<h2 id="用vue脚手架工具创建Vue3项目"><a href="#用vue脚手架工具创建Vue3项目" class="headerlink" title="用vue脚手架工具创建Vue3项目"></a>用vue脚手架工具创建Vue3项目</h2><p>接下来我们会学习vue3的一些新语法，那先要有一个Vue3的项目，所以会用 vue-cli快速生成一个集成了vue3的项目</p>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>掌握如何使用vue-cli搭建vue3.0的开发环境</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>使用vue脚手架工具创建项目，命令是？<code>vue create 项目名</code> ( 项目名不应该与package.json中的依赖包名重复)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue create vue3-learn</span><br></pre></td></tr></table></figure>

<p>接下来选中 Vue3 即可：</p>
<p><img src="/blog/./asset/image-20220218090347716.png" alt="image-20220218090347716"></p>
<p>回车之后，vue-cli会帮助我们跑起来一个内置了vue3版本的vue项目</p>
<h3 id="vue2和3的项目区别"><a href="#vue2和3的项目区别" class="headerlink" title="vue2和3的项目区别"></a>vue2和3的项目区别</h3><p>先来看三个文件：</p>
<ol>
<li>package.json</li>
<li>main.js</li>
<li>app.vue</li>
</ol>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>可以先看一下<code>package.json</code>文件，在dependencies配置项中显示，我们当前使用的版本为3</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.13&quot;</span>  <span class="comment">// 版本号</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>然后打开<code>main.js</code> 入口文件，发现Vue的实例化发生了一些变化，由先前的new关键词实例化，转变为createApp方法的调用形式 。</p>
<p>vue2.x中的写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;<span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>vue3.x的写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// createApp 函数 用来生成vue应用实例对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span> <span class="comment">// 根组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以App根组件为参数，生成vue应用实例，挂载到id为app的dom节点(public/index.html)上</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="app-vue"><a href="#app-vue" class="headerlink" title="app.vue"></a>app.vue</h3><p>打开app.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">  &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<p>发现：vue3.0的单文件组件中不再强制要求必须有唯一根元素</p>
<p>以上就我们当前阶段需要关注的所有的内容，接下来我们就可以基于当前环境学习vue3的知识点了。</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol>
<li><p>如何创建一个Vue3的项目？</p>
<p>命令： vue create  项目名   注意选择版本</p>
</li>
<li><p>Vue3的项目看起来有何不同？</p>
<p>两处不同： </p>
<p>（1）Vue3中，可以在template中写多个根元素</p>
<p>（2）创建Vue3项目的一句核心代码是？  <code>createApp(根组件).mount(&#39;public/index.html中的div容器&#39;)</code></p>
</li>
</ol>
<h2 id="组合式API和选项式API-案例对比-vue3是兼容vue2的"><a href="#组合式API和选项式API-案例对比-vue3是兼容vue2的" class="headerlink" title="组合式API和选项式API-案例对比-vue3是兼容vue2的"></a>组合式API和选项式API-案例对比-vue3是兼容vue2的</h2><p>组合式api（Composition API）是vue3对我们开发者来说变化非常大的更新，我们先不关注具体语法，先对它有一个基本的感知。</p>
<h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><p>通过vue2, vue3两种形式实现同一个需求，理解<code>vue3的compition api</code> 带来的好处</p>
<h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><img src="./asset/12.png" alt="img" style="zoom: 33%;" />

<p>两个独立的功能：</p>
<ol>
<li>通过点击按钮来控制div的显示和隐藏</li>
<li>通过点击按钮控制div内字体颜色的变化</li>
</ol>
<h3 id="用vue2实现这个需求"><a href="#用vue2实现这个需求" class="headerlink" title="用vue2实现这个需求"></a>用vue2实现这个需求</h3><p>option Api</p>
<p><code>src/01.v2-v3的代码区别/01.v2实现.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 功能一模板 --&gt;</span><br><span class="line">    &lt;button @click=&quot;show&quot;&gt;显示&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;hide&quot;&gt;隐藏&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot; v-if=&quot;showDiv&quot;&gt;一个被控制显隐的div&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 功能二模板 --&gt;</span><br><span class="line">    &lt;button @click=&quot;changeRed&quot;&gt;红色&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeYellow&quot;&gt;蓝色&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot; :style=&quot;`color:$&#123;fontColor&#125;`&quot;&gt;一个被控制字体颜色的的div&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.box&#123;width:200px;height: 200px;line-height:200px;background-color: cornflowerblue;text-align: center;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      showDiv: true, // 涉及功能一 的状态</span><br><span class="line">      fontColor: &#x27;&#x27; // 涉及功能二 的状态</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 涉及功能一 的方法</span><br><span class="line">    show() &#123;</span><br><span class="line">      this.showDiv = true</span><br><span class="line">    &#125;,</span><br><span class="line">    hide() &#123;</span><br><span class="line">      this.showDiv = false</span><br><span class="line">    &#125;,</span><br><span class="line">    // 涉及功能二 的方法</span><br><span class="line">    changeRed() &#123;</span><br><span class="line">      this.fontColor = &#x27;red&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    changeYellow() &#123;</span><br><span class="line">      this.fontColor = &#x27;blue&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="组合式API和选项式API-案例对比-vue3与vue2的区别"><a href="#组合式API和选项式API-案例对比-vue3与vue2的区别" class="headerlink" title="组合式API和选项式API-案例对比-vue3与vue2的区别"></a>组合式API和选项式API-案例对比-vue3与vue2的区别</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><p>用vue3的代码来实现同样的功能，对比其中的区别；</p>
<p>了解选项式API和组合式API的概念</p>
<h3 id="用vue3来实现"><a href="#用vue3来实现" class="headerlink" title="用vue3来实现"></a>用vue3来实现</h3><p>composition api版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 功能一模板 --&gt;</span><br><span class="line">    &lt;button @click=&quot;show&quot;&gt;显示&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;hide&quot;&gt;隐藏&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot; v-if=&quot;showDiv&quot;&gt;一个被控制显隐的div&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 功能二模板 --&gt;</span><br><span class="line">    &lt;button @click=&quot;changeRed&quot;&gt;红色&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeYellow&quot;&gt;蓝色&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot; :style=&quot;`color:$&#123;fontColor&#125;`&quot;&gt;一个被控制字体颜色的的div&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.box&#123;width:200px;height: 200px;line-height:200px;background-color: cornflowerblue;text-align: center;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 功能一</span><br><span class="line">    const showDiv = ref(true)</span><br><span class="line">    function show() &#123;</span><br><span class="line">      showDiv.value = true</span><br><span class="line">    &#125;</span><br><span class="line">    function hide() &#123;</span><br><span class="line">      showDiv.value = false</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 功能二</span><br><span class="line">    const fontColor = ref(&#x27;&#x27;)</span><br><span class="line">    function changeRed() &#123;</span><br><span class="line">      fontColor.value = &#x27;red&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    function changeYellow() &#123;</span><br><span class="line">      fontColor.value = &#x27;blue&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123; showDiv, show, hide, </span><br><span class="line">            fontColor, changeRed, changeYellow &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码大家肯定有些不认识的，没关系，先看个大概，我们后面再来系统学习。</p>
<h3 id="composition-vs-options"><a href="#composition-vs-options" class="headerlink" title="composition vs options"></a>composition vs options</h3><p><strong>Vue2 选项式API</strong>，options API。如左图所示。</p>
<p>优点：</p>
<p>​    理解容易，好上手。因为各个选项（配置项）都有固定的书写位置（比如数据就写到data选项中，操作方法就写到methods中，等等）</p>
<p>缺点：</p>
<p>​    应用大了之后，相信大家都遇到过来回上下找代码的困境—–横跳。</p>
<p><strong>Vue3 组合式API</strong>,  composition API。如右图所示。</p>
<p>特点：</p>
<ul>
<li><p>特定功能相关的所有东西都放到一起维护，比如功能A相关的响应式数据，操作数据的方法等放到一起，这样不管应用多大，都可以快速定位到某个功能的所有相关代码，维护方便设置</p>
</li>
<li><p>如果功能复杂，代码量大，我们还可以进行逻辑拆分处理。</p>
</li>
</ul>
<p><img src="/blog/./asset/04.png" alt="img"></p>
<hr>
<p><img src="/blog/./asset/image-20210709150647904.png" alt="image-20210709150647904"></p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ol>
<li><p>组合式API的由来。由于vue3中提供了一个新的写代码的方式(老方式也是可以使用的)，为了区别vue2，给他们各自取了不同的名字。</p>
</li>
<li><p>Vue2选项式API(option api)  </p>
<p>​    优点：简单，各选项各司其职；</p>
<p>​    缺点：不方便功能复用；功能代码分散维护，经常会出现代码横跳的情况</p>
</li>
<li><p>Vue3组合式API(composition api) </p>
<p>​    优点：功能代码组合维护, 方便功能复用；</p>
</li>
</ol>
<h2 id="组合式API和选项式API-案例对比-composition-api版本优化"><a href="#组合式API和选项式API-案例对比-composition-api版本优化" class="headerlink" title="组合式API和选项式API-案例对比-composition api版本优化"></a>组合式API和选项式API-案例对比-composition api版本优化</h2><p>大家可能会有疑惑，那我们现在是把功能相关的所有数据和行为放到一起维护了，如果应用很大功能很多的情况下，setup函数不会变得很大吗？岂不是又会变得比较难维护，接下来我们就来拆解一下庞大的setup函数</p>
<h3 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h3><p>拆解setup中的功能代码，改成一个个独立的函数。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> showDivFlag = <span class="title function_">ref</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    showDivFlag.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    showDivFlag.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; showDivFlag, show, hide &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fontColor = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeRed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fontColor.<span class="property">value</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeBlue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fontColor.<span class="property">value</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; fontColor, changeRed, changeBlue &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 功能一</span></span><br><span class="line">    <span class="keyword">const</span> &#123; showDivFlag, show, hide &#125; = <span class="title function_">useShow</span>()</span><br><span class="line">    <span class="comment">// 功能二</span></span><br><span class="line">    <span class="keyword">const</span> &#123; fontColor, changeRed, changeBlue &#125; = <span class="title function_">useColor</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; showDivFlag, show, hide, fontColor, changeRed, changeBlue &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>以上，我们通过定义功能函数，把两个功能相关的代码各自抽离到一个独立的小函数中，然后通过在setup函数中再把两个小功能函数组合起来，这样一来，我们既可以把setup函数变得清爽，又可以方便维护快速定位功能位置。</p>
<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>选项式API的精妙之处：分散定义，组合使用。</p>
<h2 id="组合API-setup函数"><a href="#组合API-setup函数" class="headerlink" title="组合API-setup函数"></a>组合API-setup函数</h2><h3 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h3><p>​    掌握setup函数的基本使用</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><code>setup</code> 是一个新的组件<strong>选项</strong>，它是入口函数，作为组件中使用组合API的<strong>起点</strong>。</p>
<h3 id="执行时机"><a href="#执行时机" class="headerlink" title="执行时机"></a>执行时机</h3><p>从组件生命周期来看，它的执行在组件实例创建之前执行（在beforeCreate前）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setup....&#x27;</span>, <span class="variable language_">this</span>) <span class="comment">// 它是最早的</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>, <span class="variable language_">this</span>) <span class="comment">// 它比setup迟</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这就意味着在<code>setup</code>函数中 <code>this</code> 还不是组件实例，<code>this</code> 此时是 <code>undefined</code></p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第1个参数： props。props为一个对象，内部包含了父组件传递过来的所有prop数据</span></span><br><span class="line"><span class="comment">// 第2个参数： context。context对象包含了attrs，slots，emit等属性</span></span><br><span class="line"><span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setup () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 这个函数的返回值是一个对象，在模版中需要使用的数据和函数，需要在这个对象中声明。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数的返回值是一个对象，在模版中需要使用的数据和函数，需要在这个对象中声明。</p>
<h3 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    姓名：&#123;&#123;name&#125;&#125; &lt;button @click=&quot;say&quot;&gt;打个招呼&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    console.log(&#x27;setup执行了，这里没有this. this的值是：&#x27;， this)</span><br><span class="line"></span><br><span class="line">    // 定义数据和函数</span><br><span class="line">    const name = &#x27;小吴&#x27;</span><br><span class="line">    const say = () =&gt; &#123;</span><br><span class="line">      console.log(&#x27;我是&#x27;, name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回对象，给视图使用</span><br><span class="line">    return &#123; name , say &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&#x27;beforeCreate执行了， 这里有this，this的值是:&#x27;,  this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><ol>
<li>setup的执行时机？</li>
</ol>
<p>A. 比beforeCreate后执行</p>
<p>B. 比beforeCreate先执行</p>
<ol start="2">
<li><p>setup内部可以通过this访问到组件吗?</p>
</li>
<li><p>setup的返回值格式是？ A. 数组 B. 对象</p>
</li>
</ol>
<h2 id="组合API-用ref函数定义响应式数据"><a href="#组合API-用ref函数定义响应式数据" class="headerlink" title="组合API-用ref函数定义响应式数据"></a>组合API-用ref函数定义响应式数据</h2><h3 id="问题演示"><a href="#问题演示" class="headerlink" title="问题演示"></a>问题演示</h3><p>在setup中返回的数据不是响应式的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    姓名：&#123;&#123;name&#125;&#125;，月薪:&#123;&#123;salary&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say&quot;</span>&gt;</span>打个招呼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  setup () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setup执行了&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 定义数据和函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> name = <span class="string">&#x27;小吴&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> salary = <span class="number">18000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 在函数内部修改数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">say</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是&#x27;</span>, name)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      salary *= <span class="number">2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123; msg , say&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h3><p>掌握使用ref函数定义响应式数据</p>
<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>ref 函数用来定义响应式数据（当数据值变化时，会自动触发视图的变化）</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>从vue框架中导入<code>ref</code>函数。<code>import &#123; ref &#125; from &#39;vue&#39;</code></p>
</li>
<li><p>在setup函数中调用<code>ref</code>函数并传入数据（简单类型或者复杂类型）</p>
</li>
<li><p>在setup函数中把ref函数调用完毕的返回值以对象的形式返回出去</p>
</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;姓名：&#123;&#123;name&#125;&#125;, 月薪：&#123;&#123;salary&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;double&quot;&gt;月薪double&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const name = ref(&#x27;小王&#x27;)</span><br><span class="line">    </span><br><span class="line">    // 定义响应式数据</span><br><span class="line">    const salary = ref(18000)</span><br><span class="line">    </span><br><span class="line">    const double = () =&gt; &#123;</span><br><span class="line">      // 在代码中修改(或者获取)值时，需要补上.value</span><br><span class="line">      salary.value *= 2</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;  </span><br><span class="line">      name, </span><br><span class="line">      salary,</span><br><span class="line">      double</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>在setup函数中使用ref数据，需要通过<code>.value</code> 访问</li>
<li>在模板中使用不需要加.value</li>
</ol>
<h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><p>ref函数，用来定义响应式数据</p>
<ul>
<li>在代码中修改(或者获取)值的时，需要补上____属性？</li>
<li>在____中使用时，可以省略.value</li>
</ul>
<h2 id="组合API-用ref函数来获取引用对象"><a href="#组合API-用ref函数来获取引用对象" class="headerlink" title="组合API-用ref函数来获取引用对象"></a>组合API-用ref函数来获取引用对象</h2><h3 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h3><p>如何获取子组件或者Dom元素的引用？</p>
<h3 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h3><p>掌握使用ref属性绑定DOM或组件</p>
<h3 id="回顾vue2-0的写法"><a href="#回顾vue2-0的写法" class="headerlink" title="回顾vue2.0的写法"></a>回顾vue2.0的写法</h3><p>步骤1： 通过ref属性绑定该元素 </p>
<p>步骤2：通过this.$refs.box获取元素 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div ref=&quot;xxx&quot;&gt;</span><br><span class="line">  	内容</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">// 代码内部: this.$refs.xxx</span><br></pre></td></tr></table></figure>

<h3 id="vue3中的写法步骤"><a href="#vue3中的写法步骤" class="headerlink" title="vue3中的写法步骤"></a>vue3中的写法步骤</h3><p>步骤1：导入ref函数 <code>import &#123; ref &#125; from &#39;vue&#39;</code></p>
<p>步骤2：在setup函数中， 使用ref函数传入null创建 ref对象 &#x3D;&gt; <code>const hRef = ref(null)</code> 并导出</p>
<p>步骤3：模板中通过定义ref属性设置为步骤2中创建的ref对象名称建立关联  <code>&lt;h1 ref=&quot;hRef&quot;&gt;&lt;/h1&gt;</code></p>
<p>步骤4：使用。<code>hRef.value</code></p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div ref=&quot;dom&quot;&gt;我是box&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;hClick&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    // 1. 获取单个元素</span><br><span class="line">    const dom = ref(null)</span><br><span class="line">    </span><br><span class="line">    const hClick(()=&gt;&#123;</span><br><span class="line">       // 获取dom元素</span><br><span class="line">       console.log(dom.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    return &#123;dom, hClick&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><p>先声明ref函数配合模板上的ref属性来达到引用的目的</p>
<h2 id="组合API-用reactive函数定义响应式数据"><a href="#组合API-用reactive函数定义响应式数据" class="headerlink" title="组合API-用reactive函数定义响应式数据"></a>组合API-用reactive函数定义响应式数据</h2><h3 id="问题演示-1"><a href="#问题演示-1" class="headerlink" title="问题演示"></a>问题演示</h3><p>ref函数定义的响应式数据在代码中使用要加.value，不是很方便。</p>
<h3 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h3><p>掌握使用reactive函数定义响应式数据</p>
<h3 id="reactive作用"><a href="#reactive作用" class="headerlink" title="reactive作用"></a>reactive作用</h3><p>将复杂数据定义成为响应式数据。reactive是一个函数，它可以定义一个复杂数据类型(数组，对象等)，成为响应式数据。</p>
<p><img src="/blog/./asset/image-20210709180358092.png" alt="image-20210709180358092"></p>
<h3 id="reactive使用步骤"><a href="#reactive使用步骤" class="headerlink" title="reactive使用步骤"></a>reactive使用步骤</h3><ol>
<li>导入：从vue框架中导入<code>reactive</code>函数</li>
<li>调用：在setup函数中调用reactive函数并将对象数据传入</li>
<li>导出：在setup函数中把reactive函数调用完毕之后的返回值以对象的形式返回出去</li>
<li>使用：在模块中使用</li>
</ol>
<h3 id="演示代码-1"><a href="#演示代码-1" class="headerlink" title="演示代码"></a>演示代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;姓名：&#123;&#123;stu.name&#125;&#125;, 公司：&#123;&#123;stu.company&#125;&#125;，月薪：&#123;&#123;stu.salary&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;double&quot;&gt;月薪double&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const stu = reactive(&#123;</span><br><span class="line">      company: &#x27;DiDi&#x27;,</span><br><span class="line">      name: &#x27;小王&#x27;，</span><br><span class="line">      salary：18000</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const double = () =&gt; &#123;</span><br><span class="line">      stu.salary *= 2</span><br><span class="line">      console.log(&#x27;stu.salary&#x27;, stu.salary)</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;  </span><br><span class="line">      stu,</span><br><span class="line">      double</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>reactive用来定义响应式数据,它用于复杂数据类型(简单数据不能用)</p>
<h2 id="组合API-用toRefs函数简化响应式数据的使用"><a href="#组合API-用toRefs函数简化响应式数据的使用" class="headerlink" title="组合API-用toRefs函数简化响应式数据的使用"></a>组合API-用toRefs函数简化响应式数据的使用</h2><h3 id="目标-8"><a href="#目标-8" class="headerlink" title="目标"></a>目标</h3><p>掌握使用toRefs函数的用法</p>
<h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>定义转换响应式中<strong>所有</strong>属性为响应式数据，通常用于解构|展开reactive定义对象， 简化我们在模板中的使用。</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应式数据：&#123; 属性1, 属性2 &#125;</span></span><br><span class="line"><span class="keyword">let</span> &#123; 属性<span class="number">1</span>, 属性<span class="number">2</span> &#125; = <span class="title function_">toRefs</span>(响应式数据)</span><br></pre></td></tr></table></figure>

<p>增强版的结构赋值：在解构对象的同时，保留响应式的特点。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;name&#125;&#125;, &#123;&#123;company&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;jumpToJD&quot;&gt;jumpToJD&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    // 定义响应式对象</span><br><span class="line">    const stu = reactive(&#123;</span><br><span class="line">      company: &#x27;DiDi&#x27;,</span><br><span class="line">      name: &#x27;小王&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    let &#123; name, company &#125; = toRefs(stu)</span><br><span class="line"></span><br><span class="line">    const jumpToJD = () =&gt; &#123;</span><br><span class="line">      company.value = &#x27;JD&#x27;</span><br><span class="line">      name.value = &#x27;老王&#x27;</span><br><span class="line">      console.log(&#x27;toJD&#x27;, company)</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;  name, company, jumpToJD &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><p>toRefs与reactive配套使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;p1, p2&#125; = <span class="title function_">toRefs</span>(<span class="title function_">reactive</span>(&#123;p1, p2&#125;))</span><br></pre></td></tr></table></figure>

<p>在解构响应式数据时，还保持它的响应式特征。</p>
<h2 id="如何取舍ref和reactive"><a href="#如何取舍ref和reactive" class="headerlink" title="如何取舍ref和reactive"></a>如何取舍ref和reactive</h2><p>定义响应式数据有两种方式：</p>
<ul>
<li>ref函数(可以处理简单数据，也可以处理复杂数据)，常用于将简单数据类型定义为响应式数据<ul>
<li>在代码中修改(或者获取)值时，需要补上.value</li>
<li>在模板中使用时，可以省略.value</li>
</ul>
</li>
<li>reactive函数，常用于将复杂数据类型为响应式数据</li>
</ul>
<p>推荐用法：</p>
<ol>
<li>优先使用ref</li>
<li>如果明确知道对象中有什么属性，就使用reactive。例如，表单数据</li>
</ol>
<h2 id="组合API-用computed函数定义计算属性"><a href="#组合API-用computed函数定义计算属性" class="headerlink" title="组合API-用computed函数定义计算属性"></a>组合API-用computed函数定义计算属性</h2><h3 id="目标-9"><a href="#目标-9" class="headerlink" title="目标"></a>目标</h3><p>掌握使用computed函数定义计算属性</p>
<h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3><p>根据已有数据生成新的响应式数据。</p>
<h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>从vue框架中导入<code>computed</code> 函数</li>
<li>在setup函数中执行computed函数，并传入一个函数，在函数中定义计算规则，并返回结果</li>
<li>把computed函数调用完的执行结果放到setup的return值对象中</li>
</ol>
<h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> 计算属性名 = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> 相关计算结果</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="/blog/./asset/image-20211217145239656.png" alt="image-20211217145239656"></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;, 公司：&#123;&#123;company&#125;&#125;, 月薪：&#123;&#123;salary&#125;&#125;, 年薪&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;double&quot;</span>&gt;</span>月薪double<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  setup () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 定义响应式对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> company = <span class="title function_">ref</span>(<span class="string">&#x27;DiDi&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;小王&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> salary = <span class="title function_">ref</span>(<span class="number">18000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">double</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="comment">// 完成功能</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 完成功能</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> total = <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      name, </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      company,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      total,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      salary,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      double</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;姓名：&#123;&#123;name&#125;&#125;, 公司：&#123;&#123;company&#125;&#125;, 月薪：&#123;&#123;salary&#125;&#125;, 年薪&#123;&#123;total&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;double&quot;&gt;月薪double&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    // 定义响应式对象</span><br><span class="line">    const company = ref(&#x27;DiDi&#x27;)</span><br><span class="line">    const name = ref(&#x27;小王&#x27;)</span><br><span class="line">    const salary = ref(18000)</span><br><span class="line">    const double = () =&gt; &#123;</span><br><span class="line">      salary.value *= 2 // ref数据要加.value</span><br><span class="line">    &#125;</span><br><span class="line">    // 定义计算属性</span><br><span class="line">    const total = computed(() =&gt; 12 * salary.value)</span><br><span class="line">    </span><br><span class="line">    return &#123;  </span><br><span class="line">      name, </span><br><span class="line">      company,</span><br><span class="line">      total,</span><br><span class="line">      salary,</span><br><span class="line">      double</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h3><p>vue3中的computed函数与vue2中的computed选项功能类似。</p>
<ol>
<li><p>computed的入参是一个函数</p>
</li>
<li><p>作用：根据已有数据，产生新的响应式数据。</p>
</li>
<li><p>步骤：导入，定义，导出</p>
</li>
</ol>
<h2 id="组合API-computed的高级用法"><a href="#组合API-computed的高级用法" class="headerlink" title="组合API-computed的高级用法"></a>组合API-computed的高级用法</h2><h3 id="目标-10"><a href="#目标-10" class="headerlink" title="目标"></a>目标</h3><p>掌握计算属性的高级用法：设置set属性， 会用v-model来绑定计算属性</p>
<h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 计算属性 =  <span class="title function_">computed</span>(&#123;</span><br><span class="line">  get () &#123;</span><br><span class="line">    <span class="comment">// 当获取值自动调用</span></span><br><span class="line">  &#125;,</span><br><span class="line">  set (val) &#123;</span><br><span class="line">    <span class="comment">// 当设置值自动调用，val会自动传入</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><img src="/blog/./asset/image-20211217160031370.png" alt="image-20211217160031370">支持两种交互方式：（1）点击按钮double （2）输入框中写内容</p>
<h3 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding:2em&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>小花, 月薪:&#123;&#123;salary&#125;&#125;, 年薪:&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年薪:<span class="tag">&lt;<span class="name">input</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;double&quot;</span>&gt;</span>月薪double<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  setup () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> salary = <span class="title function_">ref</span>(<span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">double</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      salary.<span class="property">value</span> *= <span class="number">2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(salary)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 定义计算属性: 普通的写法：只使用了get</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// const total = computed(() =&gt; &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return stu.salary * 12</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 定义计算属性: 高阶的写法：使用了get + set</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> total = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> salary.<span class="property">value</span> * <span class="number">12</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123; double, salary, total&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;padding:2em&quot;&gt;</span><br><span class="line">    &lt;p&gt;小花, 月薪:&#123;&#123;salary&#125;&#125;, 年薪:&#123;&#123;total&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;年薪:&lt;input v-model=&quot;total&quot;/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;double&quot;&gt;月薪double&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// reactive: 是除了ref之外的第二种申明响应式数据的方式</span><br><span class="line"></span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">  </span><br><span class="line">    const salary = ref(18000)</span><br><span class="line">     </span><br><span class="line">    const double = () =&gt; &#123;</span><br><span class="line">      salary.value *= 2</span><br><span class="line">      console.log(salary)</span><br><span class="line">    &#125;</span><br><span class="line">    // 定义计算属性: 普通的写法：只使用了get</span><br><span class="line">    // const total = computed(() =&gt; &#123;</span><br><span class="line">    //   return stu.salary * 12</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // 定义计算属性: 高阶的写法：使用了get + set</span><br><span class="line">    const total = computed(&#123;</span><br><span class="line">      get() &#123; return salary.value * 12 &#125;,</span><br><span class="line">      set(val) &#123; </span><br><span class="line">        // 设置计算属性的值，会自动调用，并传入val</span><br><span class="line">        console.log(&#x27;要设置的值...&#x27;, val)</span><br><span class="line">        salary.value = val/12</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    return &#123; double, salary, total&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>计算属性两种用法</p>
<ol>
<li><p>给computed传入函数，返回值就是计算属性的值</p>
</li>
<li><p>给computed传入对象，get获取计算属性的值，set监听计算属性改变</p>
</li>
</ol>
<blockquote>
<p>在v-model绑定计算属性： <input v-model="total" /></p>
</blockquote>
<h2 id="组合API-watch函数"><a href="#组合API-watch函数" class="headerlink" title="组合API-watch函数"></a>组合API-watch函数</h2><h3 id="目标-11"><a href="#目标-11" class="headerlink" title="目标"></a>目标</h3><p>掌握使用watch函数定义侦听器</p>
<h3 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h3><p>基于响应式数据的变化执行回调逻辑，和vue2中的watch的应用场景完全一致。</p>
<h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>导入。<code>import &#123; watch &#125; from &#39;vue&#39;</code></p>
</li>
<li><p>开启监听。在setup函数中执行watch函数开启对响应式数据的监听</p>
</li>
<li><p>watch函数接收三个常规参数</p>
<ol>
<li><p>第一个参数有三种取值：</p>
<p>对象，要监听的响应式数据</p>
<p>数组，每个元素是响应式数据</p>
<p>函数，返回你要监听变化的响应式数据</p>
</li>
<li><p>第二个参数是：响应式数据变化之后要执行的回调函数</p>
</li>
<li><p>第三个参数是: 一个对象，在里面配置是否开启立刻执行或者深度监听</p>
</li>
</ol>
</li>
</ol>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123;stu&#125;&#125;, &#123;&#123;salary&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;doSome&quot;</span>&gt;</span> do<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive, watch, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> salary = <span class="title function_">ref</span>(<span class="number">10000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> stu  = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">address</span>: &#123;<span class="attr">city</span>: <span class="string">&#x27;wuhan&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 侦听-单个数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">watch</span>(salary, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听单个数据&#x27;</span>, newVal, oldVal)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			 <span class="comment">// 侦听-单个数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">watch</span>(stu, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听单个数据&#x27;</span>, newVal, oldVal)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      	<span class="comment">// 2. 侦听-多个数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">watch</span>([stu, salary], <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听多个数据&#x27;</span>, newVal, oldVal)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">// 3. 侦听对象的某个属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">watch</span>(<span class="function">()=&gt;</span>stu.<span class="property">address</span> , <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个参数是函数&#x27;</span>, newVal, oldVal)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, &#123;<span class="attr">deep</span>: <span class="literal">true</span>,  <span class="attr">immediate</span>: <span class="literal">true</span>&#125; )</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 测试按钮，修改数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> <span class="title function_">doSome</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            salary.<span class="property">value</span> +=<span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            stu.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;stu, salary, doSome&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h3><p>作用：watch用来侦听数据的变化。</p>
<p>格式：watch(数据|数组|get函数，(新值，旧值)&#x3D;&gt;{回调处理逻辑}, {immediate:true|false, deep: true|false})</p>
<h2 id="组合API-父子通讯-父传子"><a href="#组合API-父子通讯-父传子" class="headerlink" title="组合API-父子通讯-父传子"></a>组合API-父子通讯-父传子</h2><h3 id="目标-12"><a href="#目标-12" class="headerlink" title="目标"></a>目标</h3><p>掌握使用props选项和emits选项完成父子组件通讯</p>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>setup函数有两个参数第一个参数为props，第二个参数为一个对象context</p>
<p>props为一个对象，内部包含了父组件传递过来的所有prop数据</p>
<p>context对象包含了attrs，slots， emit属性，其中的emit可以触发自定义事件的执行从而完成子传父</p>
<h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p><img src="/blog/./asset/image-20220218154053981.png" alt="image-20220218154053981"></p>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p><img src="/blog/./asset/image-20211217172627081.png" alt="image-20211217172627081"></p>
<h3 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h3><h4 id="父组件：app-vue"><a href="#父组件：app-vue" class="headerlink" title="父组件：app.vue"></a>父组件：app.vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div style=&quot;border:1px solid #ccc;margin:1em;padding:1em&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h1&gt;父组件-小花同学喜获offer&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;父组件:&#123;&#123;list&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;Son/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./son.vue&#x27;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son</span><br><span class="line">  &#125;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    // 下边的数据假设是从 后端获取的</span><br><span class="line">    const list = reactive([&#123;id:1, name: &#x27;JD&#x27;&#125;, &#123;id:2, name: &#x27;DiDi&#x27;&#125;])</span><br><span class="line">    </span><br><span class="line">    return &#123;  </span><br><span class="line">      list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="子组件-son-vue"><a href="#子组件-son-vue" class="headerlink" title="子组件 son.vue"></a>子组件 son.vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;border:1px solid #ccc;margin:1em;padding:1em&quot;&gt;</span><br><span class="line">    从父组件中接收的prop</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h3><h4 id="父组件：app-vue-1"><a href="#父组件：app-vue-1" class="headerlink" title="父组件：app.vue"></a>父组件：app.vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div style=&quot;border:1px solid #ccc;margin:1em;padding:1em&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h1&gt;父组件-小花同学喜获offer&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;父组件:&#123;&#123;list&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;Son :list=&quot;list&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./son.vue&#x27;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son</span><br><span class="line">  &#125;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const list = reactive([&#123;id:1, name: &#x27;JD&#x27;&#125;, &#123;id:2, name: &#x27;DiDi&#x27;&#125;])</span><br><span class="line">    return &#123;  </span><br><span class="line">      list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="子组件-son-vue-1"><a href="#子组件-son-vue-1" class="headerlink" title="子组件 son.vue"></a>子组件 son.vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;border:1px solid #ccc;margin:1em;padding:1em&quot;&gt;</span><br><span class="line">    从父组件中接收的prop</span><br><span class="line">    &lt;p v-for=&quot;item in list&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">      公司名：&#123;&#123;item.name&#125;&#125;, offer:&#123;&#123;item.id&#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 子组件接收父组件数据使用props即可</span><br><span class="line">  props: &#123;</span><br><span class="line">    list: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      required:true,</span><br><span class="line">      default:()=&gt;[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    console.log(props.list.length)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="小结-10"><a href="#小结-10" class="headerlink" title="小结"></a>小结</h3><p>父传子通过自定义属性把数据从父组件传递给子组件；</p>
<p>在子组件中设置props选项来接收，在setup函数中，通过设置第___个参数来获取；</p>
<h2 id="组合API-父子通讯-子传父"><a href="#组合API-父子通讯-子传父" class="headerlink" title="组合API-父子通讯-子传父"></a>组合API-父子通讯-子传父</h2><h3 id="目标-13"><a href="#目标-13" class="headerlink" title="目标"></a>目标</h3><p>掌握子传父的使用</p>
<h3 id="子传父图示"><a href="#子传父图示" class="headerlink" title="子传父图示"></a>子传父图示</h3><p>掌握子传父</p>
<p><img src="/blog/asset/image-20210604224741232.png" alt="image-20210604224741232"></p>
<h4 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    添加新公司</span><br><span class="line">    &lt;p&gt;新公司:&lt;input v-model=&quot;name&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup(props, &#123;emit&#125;) &#123;</span><br><span class="line">    const name = ref(&#x27;&#x27;)</span><br><span class="line">    const add = () =&gt; &#123;</span><br><span class="line">      console.log(name.value)</span><br><span class="line">      emit(&#x27;add-company&#x27;, name.value)</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      name,</span><br><span class="line">      add</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;Son :list=&quot;list&quot;  @add-company=&quot;hAdd&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &#x27;./companyList.vue&#x27;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son</span><br><span class="line">  &#125;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const list = reactive([&#123;id:1, name: &#x27;JD&#x27;&#125;, &#123;id:2, name: &#x27;DiDi&#x27;&#125;])</span><br><span class="line">    const hAdd = (companyName) =&gt; &#123;</span><br><span class="line">      list.push(&#123;id: Date.now(), name: companyName&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      list,</span><br><span class="line">      hAdd</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>父传子：在setup中使用props数据  <code>setup(props)&#123; // props就是父组件数据  &#125;</code></p>
<p>子传父：触发自定义事件的时候emit来自 <code>setup(props,&#123;emit&#125;)&#123; // emit 就是触发事件的函数 &#125;</code></p>
<h2 id="vue3中的v-model语法糖"><a href="#vue3中的v-model语法糖" class="headerlink" title="vue3中的v-model语法糖"></a>vue3中的v-model语法糖</h2><h3 id="目标-14"><a href="#目标-14" class="headerlink" title="目标"></a>目标</h3><p>掌握vue3.0的v-model语法糖原理</p>
<h3 id="对比Vue2中的v-model"><a href="#对比Vue2中的v-model" class="headerlink" title="对比Vue2中的v-model"></a>对比Vue2中的v-model</h3><p>在vue2.0中v-mode语法糖简写的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Son v-model=&quot;msg&quot; /&gt;</span><br><span class="line">&lt;!--vue2中 上面的写法等价于下边---------------&gt;  </span><br><span class="line">&lt;Son :value=&quot;msg&quot;  @input=&quot;val=&gt;msg=val&quot; /&gt;`</span><br></pre></td></tr></table></figure>



<p>在vue3.0中v-model语法糖有所调整：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Son v-model=&quot;msg&quot; /&gt;</span><br><span class="line">&lt;!--vue3中 上面的写法等价于下边---------------&gt;  </span><br><span class="line">&lt;Son :modelValue=&quot;msg&quot;  @update:modelValue=&quot;val=&gt;msg=val&quot;/&gt;`</span><br></pre></td></tr></table></figure>

<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p>父组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;Son v-model=&quot;count&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son</span><br><span class="line">  &#125;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const count = ref(10)</span><br><span class="line">    return &#123; count &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h2&gt;子组件 &#123;&#123;modelValue&#125;&#125; &lt;button @click=&quot;fn&quot;&gt;改变数据&lt;/button&gt;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Son&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    modelValue: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  setup (props, &#123;emit&#125;) &#123;</span><br><span class="line">    const fn = () =&gt; &#123;</span><br><span class="line">      // 改变数据</span><br><span class="line">      emit(&#x27;update:modelValue&#x27;, 100)</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123; fn &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="小结-11"><a href="#小结-11" class="headerlink" title="小结"></a>小结</h3><p>在setup的两个参数中获取props和emit</p>
<p>父传子 props: <code>:modelValue</code> </p>
<p>子传父 emit <code>@update:modelValue</code></p>
<h2 id="多个v-model"><a href="#多个v-model" class="headerlink" title="多个v-model"></a>多个v-model</h2><h3 id="目标-15"><a href="#目标-15" class="headerlink" title="目标"></a>目标</h3><p>掌握在vue3中的多个v-model的使用</p>
<h3 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Son v-model:xxx=&quot;msg&quot;/&gt;</span><br><span class="line">-----相当于下边------------  </span><br><span class="line">&lt;Son :xxx=&quot;msg&quot;  @update:xxx=&quot;val=&gt;msg=val&quot;/&gt;`</span><br></pre></td></tr></table></figure>

<h3 id="小结-12"><a href="#小结-12" class="headerlink" title="小结"></a>小结</h3><p>在vue2.0的  <code>xxx.sync</code> 语法糖解析  父传子 <code>:xxx</code>  子传父  <code>@update:xxx</code>  </p>
<p>在vue3.0 使用 <code>v-model:xxx</code> 代替。</p>
<h2 id="组合API-依赖注入-祖先传后代"><a href="#组合API-依赖注入-祖先传后代" class="headerlink" title="组合API-依赖注入-祖先传后代"></a>组合API-依赖注入-祖先传后代</h2><h3 id="目标-16"><a href="#目标-16" class="headerlink" title="目标"></a>目标</h3><p>掌握使用provide函数和inject函数完成后代组件数据通讯</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>最外层有祖先组件，里头有：子组件、孙组件、很多后代组件。这些后代组件共享祖先组件数据。</p>
<p><img src="/blog/asset/image-20210605092050489.png" alt="image-20210605092050489"></p>
<h3 id="两个步骤"><a href="#两个步骤" class="headerlink" title="两个步骤"></a>两个步骤</h3><ol>
<li>祖先组件中提供数据： <code>provide(&#39;数据名1&#39;, 数据名)</code></li>
<li>后代组件中使用数据： <code>inject(&#39;数据名1&#39;)</code></li>
</ol>
<h3 id="演示代码-2"><a href="#演示代码-2" class="headerlink" title="演示代码"></a>演示代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;父组件 &#123;&#123;money&#125;&#125; &lt;button @click=&quot;money=1000&quot;&gt;发钱&lt;/button&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;Son /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son</span><br><span class="line">  &#125;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const money = ref(100)</span><br><span class="line">    // 将数据提供给后代组件 provide</span><br><span class="line">    provide(&#x27;money&#x27;, money)</span><br><span class="line"></span><br><span class="line">    return &#123; money &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h2&gt;子组件 &#123;&#123;money&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;GrandSon /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line">import GrandSon from &#x27;./GrandSon.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Son&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandSon</span><br><span class="line">  &#125;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    // 接收祖先组件提供的数据</span><br><span class="line">    const money = inject(&#x27;money&#x27;)</span><br><span class="line">    return &#123; money &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h3&gt;孙组件 &#123;&#123;money&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;GrandSon&#x27;,</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const money = inject(&#x27;money&#x27;)</span><br><span class="line"></span><br><span class="line">    return &#123;money&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul>
<li>provide函数提供数据和函数给后代组件使用</li>
<li>inject函数给当前组件注入provide提供的数据和函数</li>
</ul>
<h2 id="组合API-依赖注入-后代改祖先"><a href="#组合API-依赖注入-后代改祖先" class="headerlink" title="组合API-依赖注入-后代改祖先"></a>组合API-依赖注入-后代改祖先</h2><h3 id="目标-17"><a href="#目标-17" class="headerlink" title="目标"></a>目标</h3><p>掌握使用provide函数和inject函数完成后代组件数据通讯</p>
<h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p><img src="/blog/asset/image-20210605092647672.png" alt="image-20210605092647672"></p>
<h3 id="两个步骤-1"><a href="#两个步骤-1" class="headerlink" title="两个步骤"></a>两个步骤</h3><ol>
<li>祖先组件中提供数据&amp;<strong>操作数据的函数f</strong>： <code>provide(&#39;函数f&#39;, 数据名)</code></li>
<li>后代组件中获取<strong>操作数据的函数f</strong>，并调用数据： <code>inject(&#39;函数f&#39;)</code></li>
</ol>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><h2 id="组合API-生命周期"><a href="#组合API-生命周期" class="headerlink" title="组合API-生命周期"></a>组合API-生命周期</h2><h3 id="目标-18"><a href="#目标-18" class="headerlink" title="目标"></a>目标</h3><p>掌握使用组合API写法的生命周期钩子函数</p>
<h3 id="回顾vue2-x生命周期钩子函数"><a href="#回顾vue2-x生命周期钩子函数" class="headerlink" title="回顾vue2.x生命周期钩子函数"></a>回顾vue2.x生命周期钩子函数</h3><p>按顺序是如下8个选项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>)&#125;,  </span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>)&#125;,</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>)&#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>)&#125;,</span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>)&#125;,</span><br><span class="line">  <span class="title function_">updated</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>)&#125;,</span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy&#x27;</span>)&#125;,</span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed&#x27;</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vue3-0生命周期钩子函数"><a href="#vue3-0生命周期钩子函数" class="headerlink" title="vue3.0生命周期钩子函数"></a>vue3.0生命周期钩子函数</h3><ul>
<li><code>setup</code> 创建实例前</li>
<li><code>onBeforeMount</code>  挂载DOM前</li>
<li><code>onMounted</code> 挂载DOM后</li>
<li><code>onBeforeUpdate</code> 更新组件前</li>
<li><code>onUpdated</code> 更新组件后</li>
<li><code>onBeforeUnmount</code> 卸载销毁前</li>
<li><code>onUnmounted</code>  卸载销毁后</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setup () &#123;</span><br><span class="line">    <span class="title function_">onBeforeMount</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM渲染前&#x27;</span>,<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM渲染后1&#x27;</span>,<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="演示代码-3"><a href="#演示代码-3" class="headerlink" title="演示代码"></a>演示代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    container</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; onBeforeMount, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    onBeforeMount(()=&gt;&#123;</span><br><span class="line">      console.log(&#x27;DOM渲染前&#x27;,document.querySelector(&#x27;.container&#x27;))</span><br><span class="line">    &#125;)</span><br><span class="line">    onMounted(()=&gt;&#123;</span><br><span class="line">      console.log(&#x27;DOM渲染后1&#x27;,document.querySelector(&#x27;.container&#x27;))</span><br><span class="line">    &#125;)</span><br><span class="line">    onMounted(()=&gt;&#123;</span><br><span class="line">      console.log(&#x27;DOM渲染后2&#x27;,document.querySelector(&#x27;.container&#x27;))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/blog/asset/1619283131573.png" alt="1619283131573"></p>
<h3 id="明细列表"><a href="#明细列表" class="headerlink" title="明细列表"></a>明细列表</h3><table>
<thead>
<tr>
<th>选项式API（Vue2）</th>
<th>组合式API(Vue3)</th>
</tr>
</thead>
<tbody><tr>
<td><code>beforeCreate</code></td>
<td>不需要（直接写到setup函数中）</td>
</tr>
<tr>
<td><code>created</code></td>
<td>不需要（直接写到setup函数中）</td>
</tr>
<tr>
<td><code>beforeMount</code></td>
<td><code>onBeforeMount</code></td>
</tr>
<tr>
<td><code>mounted</code></td>
<td><code>onMounted</code></td>
</tr>
<tr>
<td><code>beforeUpdate</code></td>
<td><code>onBeforeUpdate</code></td>
</tr>
<tr>
<td><code>updated</code></td>
<td><code>onUpdated</code></td>
</tr>
<tr>
<td><code>beforeDestroyed</code></td>
<td><code>onBeforeUnmount</code></td>
</tr>
<tr>
<td><code>destroyed</code></td>
<td><code>onUnmounted</code></td>
</tr>
</tbody></table>
<p>生命周期钩子函数的应用场景</p>
<p>created: 发ajax,挂载公用属性</p>
<p>mounted:  dom操作</p>
<p>destoryed: 销毁操作。定时器，socket</p>
<h3 id="小结-13"><a href="#小结-13" class="headerlink" title="小结"></a>小结</h3><ul>
<li>组合API的生命周期钩子有7个，它们都是回调函数的格式。<strong>可以多次使用同一个钩子</strong>，执行顺序和书写顺序相同</li>
<li>选项式API的声明周期有8个。</li>
<li>不建议vue2, vue3混合使用</li>
</ul>
<h2 id="综合案例-Todos"><a href="#综合案例-Todos" class="headerlink" title="综合案例 - Todos"></a>综合案例 - Todos</h2><p> 巩固vue3.0中组合式API的使用</p>
<p><img src="/blog/asset/image-20211219075607396.png" alt="image-20211219075607396"></p>
<p><strong>案例演示</strong></p>
<blockquote>
<p>运行todos案例项目，查看案例效果</p>
</blockquote>
<h3 id="目标功能"><a href="#目标功能" class="headerlink" title="目标功能"></a>目标功能</h3><ol>
<li>渲染列表数据 <code>v-for</code></li>
<li>点击删除当前列表 <code>splice + index</code></li>
<li>回车添加新项目 <code>@keyup.enter=&quot;addTodo&quot;</code> <code>list.unshift</code></li>
<li>选择状态切换 <code>v-model</code></li>
<li>多选和取消多选 <code>计算属性的set和get</code></li>
<li>未完成任务数量统计 <code>computed</code></li>
</ol>
<h3 id="静态模板"><a href="#静态模板" class="headerlink" title="静态模板"></a>静态模板</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;todoapp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头部输入框区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入要完成的任务&quot;</span> <span class="attr">autofocus</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 全选切换input --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>标记所有已经完成<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 任务列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>写代码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>打豆豆<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;todo-count&quot;</span>&gt;</span></span><br><span class="line">        还未完成的任务有:<span class="tag">&lt;<span class="name">strong</span>&gt;</span>3<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>项</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">border</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">background</span>: none;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">font-size</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">vertical-align</span>: baseline;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">font-family</span>: inherit;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">font-weight</span>: inherit;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="language-css">	-webkit-appearance: none;</span></span><br><span class="line"><span class="language-css">	appearance: none;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">	-moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">font</span>: <span class="number">14px</span> <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">line-height</span>: <span class="number">1.4em</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">color</span>: <span class="number">#111111</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">min-width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">max-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">	-moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">font-weight</span>: <span class="number">300</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">outline</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.hidden</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todoapp</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">130px</span> <span class="number">0</span> <span class="number">40px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">25px</span> <span class="number">50px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todoapp</span> <span class="selector-tag">input</span>::-webkit-input-placeholder &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todoapp</span> <span class="selector-tag">input</span>::-moz-placeholder &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todoapp</span> <span class="selector-tag">input</span>::input-placeholder &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todoapp</span> <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: -<span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#b83f45</span>;</span></span><br><span class="line"><span class="language-css">  -webkit-<span class="attribute">text-rendering</span>: optimizeLegibility;</span></span><br><span class="line"><span class="language-css">  -moz-<span class="attribute">text-rendering</span>: optimizeLegibility;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-rendering</span>: optimizeLegibility;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.new-todo</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.edit</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-family</span>: inherit;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: inherit;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">line-height</span>: <span class="number">1.4em</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.new-todo</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">16px</span> <span class="number">16px</span> <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.003</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">2px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.03</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#e6e6e6</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.toggle-all</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: none; <span class="comment">/* Mobile Safari */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.toggle-all</span> + <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">34px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: -<span class="number">52px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: -<span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.toggle-all</span> + <span class="selector-tag">label</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">content</span>: <span class="string">&quot;❯&quot;</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#e6e6e6</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">27px</span> <span class="number">10px</span> <span class="number">27px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.toggle-all</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#737373</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ededed</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-bottom</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span><span class="selector-class">.editing</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-bottom</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span><span class="selector-class">.editing</span> <span class="selector-class">.edit</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">43px</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">43px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span><span class="selector-class">.editing</span> <span class="selector-class">.view</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.toggle</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* auto, since non-WebKit browsers doesn&#x27;t support input styling */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: none; <span class="comment">/* Mobile Safari */</span></span></span><br><span class="line"><span class="language-css">  -webkit-appearance: none;</span></span><br><span class="line"><span class="language-css">  appearance: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.toggle</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.toggle</span> + <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%23ededed%22%20stroke-width%3D%223%22/%3E%3C/svg%3E&quot;</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-position</span>: center left;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.toggle</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%23bddad5%22%20stroke-width%3D%223%22/%3E%3Cpath%20fill%3D%22%235dc2af%22%20d%3D%22M72%2025L42%2071%2027%2056l-4%204%2020%2020%2034-52z%22/%3E%3C/svg%3E&quot;</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">word-break</span>: break-all;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: color <span class="number">0.4s</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#4d4d4d</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span><span class="selector-class">.completed</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#cdcdcd</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.destroy</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#cc9a9a</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: <span class="number">11px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: color <span class="number">0.2s</span> ease-out;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.destroy</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#af5b5e</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.destroy</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">content</span>: <span class="string">&quot;×&quot;</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.destroy</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.edit</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span><span class="selector-class">.editing</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#e6e6e6</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.footer</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span> -<span class="number">3px</span> <span class="number">#f6f6f6</span>,</span></span><br><span class="line"><span class="language-css">    <span class="number">0</span> <span class="number">9px</span> <span class="number">1px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">16px</span> <span class="number">0</span> -<span class="number">6px</span> <span class="number">#f6f6f6</span>,</span></span><br><span class="line"><span class="language-css">    <span class="number">0</span> <span class="number">17px</span> <span class="number">2px</span> -<span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-count</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.todo-count</span> <span class="selector-tag">strong</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.filters</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.filters</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.filters</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">7px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.filters</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">175</span>, <span class="number">47</span>, <span class="number">47</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.filters</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-class">.selected</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">175</span>, <span class="number">47</span>, <span class="number">47</span>, <span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.clear-completed</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span> <span class="selector-class">.clear-completed</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.clear-completed</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">65px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#4d4d4d</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">11px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.info</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.info</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.info</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">	Hack to remove background from Mobile Safari.</span></span></span><br><span class="line"><span class="comment"><span class="language-css">	Can&#x27;t use it globally since it destroys checkboxes in Firefox</span></span></span><br><span class="line"><span class="comment"><span class="language-css">*/</span></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.toggle-all</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.toggle</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.toggle</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">430px</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.filters</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="完成代码"><a href="#完成代码" class="headerlink" title="完成代码"></a>完成代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;section class=&quot;todoapp&quot;&gt;</span><br><span class="line">    &lt;!-- 头部输入框区域 --&gt;</span><br><span class="line">    &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">      &lt;h1&gt;todos&lt;/h1&gt;</span><br><span class="line">      &lt;input </span><br><span class="line">      class=&quot;new-todo&quot; </span><br><span class="line">      placeholder=&quot;请输入要完成的任务&quot; </span><br><span class="line">      autofocus</span><br><span class="line">      @keyup.enter=&quot;hAdd&quot;</span><br><span class="line">      v-model=&quot;flag&quot;</span><br><span class="line">       /&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;section class=&quot;main&quot;&gt;</span><br><span class="line">      &lt;!-- 全选切换input --&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        id=&quot;toggle-all&quot;</span><br><span class="line">        class=&quot;toggle-all&quot;</span><br><span class="line">        type=&quot;checkbox&quot;</span><br><span class="line">        v-model=&quot;isDoneAll&quot;</span><br><span class="line"></span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;label for=&quot;toggle-all&quot;&gt;标记所有已经完成&lt;/label&gt;</span><br><span class="line">      &lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">        &lt;!-- 任务列表 --&gt;</span><br><span class="line">        &lt;li v-for=&quot;(item,idx) in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">            &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; v-model=&quot;item.isDone&quot;/&gt;</span><br><span class="line">            &lt;label&gt;&#123;&#123;item.flag&#125;&#125;&lt;/label&gt;</span><br><span class="line">            &lt;button class=&quot;destroy&quot; @click=&quot;list.splice(idx, 1)&quot;&gt;&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;!-- &lt;li &gt;</span><br><span class="line">          &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">            &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot;  /&gt;</span><br><span class="line">            &lt;label&gt;打豆豆&lt;/label&gt;</span><br><span class="line">            &lt;button class=&quot;destroy&quot;&gt;&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt; --&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    &lt;footer class=&quot;footer&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;todo-count&quot;&gt;</span><br><span class="line">        还未完成的任务有:&lt;strong&gt;&#123;&#123;unDoLength&#125;&#125;&lt;/strong&gt;项</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const list = ref([</span><br><span class="line">      &#123;id:1, flag: &#x27;吃饭&#x27;, isDone: true&#125;,</span><br><span class="line">      &#123;id:2, flag: &#x27;睡觉&#x27;, isDone: false&#125;,</span><br><span class="line">    ])</span><br><span class="line">    const flag = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    const hAdd = () =&gt; &#123;</span><br><span class="line">      console.log(flag.value)</span><br><span class="line">      // 向list中头部添加</span><br><span class="line">      list.value.unshift(&#123;id: Date.now(), flag: flag.value, isDone: false&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const unDoLength = computed(()=&gt;&#123;</span><br><span class="line">      // 在list中，找出还有几项没有完成 </span><br><span class="line">      return list.value.filter(item=&gt;item.isDone === false).length</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const isDoneAll = computed(&#123;</span><br><span class="line">      get()&#123;</span><br><span class="line">        // 当list中每一个isDone都是true,它就是true</span><br><span class="line">        return list.value.every(item=&gt;item.isDone === true)</span><br><span class="line">      &#125;,</span><br><span class="line">      set(val) &#123;</span><br><span class="line">        console.log(&#x27;设置&#x27;,val)</span><br><span class="line">        list.value.forEach(item=&gt;item.isDone = val)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    return &#123;</span><br><span class="line">      list,</span><br><span class="line">      flag,</span><br><span class="line">      hAdd,</span><br><span class="line">      unDoLength,</span><br><span class="line">      isDoneAll</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="拓展：v3的dev-tools工具配置"><a href="#拓展：v3的dev-tools工具配置" class="headerlink" title="拓展：v3的dev-tools工具配置"></a>拓展：v3的dev-tools工具配置</h2><h3 id="目标-19"><a href="#目标-19" class="headerlink" title="目标"></a>目标</h3><p>安装针对于vue3的开发调试环境</p>
<p>作为vue框架官方调试工具，dev-tools提供了对于组件关系和数据状态方便的查看和调试功能，现在它也更新到了适配vue3的版本，我们这次的项目使用最新的版本进行预览调试开发</p>
<p><strong>注意：先把之前基于vue2的版本的禁止掉</strong></p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a><strong>安装步骤</strong></h3><ol>
<li>打开chrome -&gt; 更多工具 -&gt; 扩展程序</li>
<li>把课程资源下的dev-tools中的shell-chrome拖入即可</li>
</ol>
<h3 id="调试组件数据"><a href="#调试组件数据" class="headerlink" title="调试组件数据"></a><strong>调试组件数据</strong></h3><p><img src="/blog/asset/dev-tools1.png" alt="dev-tools1"></p>
<h3 id="调试事件Timeline"><a href="#调试事件Timeline" class="headerlink" title="调试事件Timeline"></a><strong>调试事件Timeline</strong></h3><p><img src="/blog/asset/dev-tools2.png" alt="dev-tools1"></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
